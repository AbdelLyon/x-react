{"version":3,"sources":["../src/navbar/Navbar.tsx"],"names":["NavbarRoot"],"mappings":"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","file":"chunk-R3PRDA2J.es.js","sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type {\n  NavbarContentProps,\n  NavbarMenuProps,\n  NavbarProps as NavbarRootProps,\n} from \"@nextui-org/react\";\nimport {\n  Navbar as NavbarRoot,\n  NavbarContent,\n  NavbarMenu,\n  NavbarMenuToggle,\n  NavbarItem,\n  NavbarMenuItem,\n  Link,\n} from \"@nextui-org/react\";\nimport { cn } from \"@/utils\";\nimport type { Item } from \"@/types/navigation\";\nimport { useResponsive } from \"@/hooks\";\n\nexport type NavbarProps = {\n  appName?: ReactNode;\n  appLogo?: ReactNode;\n  profile?: ReactNode;\n  navigationItems?: Item[];\n  menuItems?: Item[];\n  contentProps?: NavbarContentProps;\n  menuProps?: NavbarMenuProps;\n  onItemClick?: (item: Item) => void;\n  isMenuOpen?: boolean;\n  onMenuOpenChange?: (isOpen: boolean) => void;\n  classNames?: {\n    item?: string;\n  };\n} & Omit<NavbarRootProps, \"children\">;\n\nexport const Navbar = forwardRef<HTMLElement, NavbarProps>(\n  (\n    {\n      appName,\n      appLogo,\n      profile,\n      navigationItems = [],\n      menuItems = [],\n      contentProps,\n      menuProps,\n      onItemClick,\n      className,\n      classNames,\n      isMenuOpen,\n      onMenuOpenChange,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isDesktop, isMobile, isTablet } = useResponsive();\n\n    const handleItemPress = (item: Item): void => {\n      item.onPress?.();\n      onItemClick?.(item);\n      onMenuOpenChange?.(false);\n    };\n\n    return (\n      <NavbarRoot\n        ref={ref}\n        className={className}\n        classNames={{\n          base: \"bg-white dark:bg-background\",\n          wrapper: \"max-w-full\",\n          ...classNames,\n        }}\n        isMenuOpen={isMenuOpen}\n        onMenuOpenChange={onMenuOpenChange}\n        {...props}\n      >\n        {isMobile && (\n          <NavbarContent>\n            <NavbarMenuToggle\n              aria-label={isMenuOpen === true ? \"Close menu\" : \"Open menu\"}\n            />\n          </NavbarContent>\n        )}\n\n        {!isMobile && (appName !== null || appLogo !== null) && (\n          <NavbarContent justify=\"start\">\n            {!isTablet && appName !== null && (\n              <NavbarItem className=\"w-[247px] border-r-2 border-default\">\n                {appName}\n              </NavbarItem>\n            )}\n            {appLogo !== null && <NavbarItem>{appLogo}</NavbarItem>}\n          </NavbarContent>\n        )}\n\n        <NavbarContent justify=\"end\" {...contentProps}>\n          {isDesktop &&\n            navigationItems.map((item) => (\n              <NavbarItem key={item.key}>\n                <Link\n                  className={cn(\n                    \"p-2 hover:bg-content1 rounded-md text-foreground\",\n                    {\n                      \"border-l-2 border-primary bg-content1 text-primary\":\n                        item.isActive,\n                    },\n                    classNames?.item,\n                  )}\n                  onPress={() => handleItemPress(item)}\n                >\n                  {item.startContent}\n                  {item.label}\n                  {item.endContent}\n                </Link>\n              </NavbarItem>\n            ))}\n          {profile !== null && <NavbarItem>{profile}</NavbarItem>}\n        </NavbarContent>\n\n        {/* Mobile Menu */}\n        {!isDesktop && (\n          <NavbarMenu {...menuProps}>\n            {menuItems.map((item) => (\n              <NavbarMenuItem key={item.key}>\n                <Link\n                  key={item.key}\n                  className={cn(\n                    \"flex items-center gap-3 p-3 text-foreground hover:bg-content1 rounded-md cursor-pointer\",\n                    {\n                      \"border-l-2 border-primary bg-content1 text-primary\":\n                        item.isActive,\n                    },\n                    classNames?.item,\n                  )}\n                  onPress={() => onItemClick?.(item)}\n                >\n                  {item.startContent}\n                  {item.label}\n                  {item.endContent}\n                </Link>\n              </NavbarMenuItem>\n            ))}\n          </NavbarMenu>\n        )}\n      </NavbarRoot>\n    );\n  },\n);\n\nNavbar.displayName = \"Navbar\";\n"]}