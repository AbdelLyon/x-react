{"version":3,"file":"index.js","sources":["../../../src/hooks/useDebouncedState.ts"],"sourcesContent":["import type { SetStateAction } from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport const useDebouncedState = <T>(\n  defaultValue: T,\n  wait: number,\n  options = { leading: false },\n): readonly [T, (newValue: SetStateAction<T>) => void] => {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef<number | null>(null);\n  const leadingRef = useRef(true);\n\n  const clearTimeout = (): void => {\n    if (timeoutRef.current !== null) {\n      window.clearTimeout(timeoutRef.current);\n    }\n  };\n  useEffect(() => clearTimeout, []);\n\n  const debouncedSetValue = (newValue: SetStateAction<T>): void => {\n    clearTimeout();\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n    leadingRef.current = false;\n  };\n\n  return [value, debouncedSetValue] as const;\n};\n"],"names":["useDebouncedState","defaultValue","wait","options","value","setValue","useState","timeoutRef","useRef","leadingRef","clearTimeout","useEffect","newValue"],"mappings":";AAGa,MAAAA,IAAoB,CAC/BC,GACAC,GACAC,IAAU,EAAE,SAAS,SACmC;AACxD,QAAM,CAACC,GAAOC,CAAQ,IAAIC,EAASL,CAAY,GACzCM,IAAaC,EAAsB,IAAI,GACvCC,IAAaD,EAAO,EAAI,GAExBE,IAAe,MAAY;AAC3B,IAAAH,EAAW,YAAY,QAClB,OAAA,aAAaA,EAAW,OAAO;AAAA,EAE1C;AACU,SAAAI,EAAA,MAAMD,GAAc,EAAE,GAezB,CAACN,GAbkB,CAACQ,MAAsC;AAClD,IAAAF,EAAA,GACTD,EAAW,WAAWN,EAAQ,UAChCE,EAASO,CAAQ,IAENL,EAAA,UAAU,OAAO,WAAW,MAAM;AAC3C,MAAAE,EAAW,UAAU,IACrBJ,EAASO,CAAQ;AAAA,OAChBV,CAAI,GAETO,EAAW,UAAU;AAAA,EACvB,CAEgC;AAClC;"}