{"version":3,"file":"index.js","sources":["../../../src/hooks/useLocalStorage.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\n\ninterface StorageProperties<T> {\n  key: string;\n  defaultValue: T;\n}\n\nfunction getStorageValue<T>(key: string, defaultValue: T): T {\n  if (typeof window === \"undefined\") {\n    return defaultValue;\n  }\n\n  try {\n    const item = window.localStorage.getItem(key);\n    if (item === null) {\n      return defaultValue;\n    }\n    return JSON.parse(item);\n  } catch (error) {\n    console.warn(`Error reading localStorage key \"${key}\":`, error);\n    return defaultValue;\n  }\n}\n\nexport const useLocalStorage = <T>(\n  props: StorageProperties<T>,\n): readonly [T, (value: T | ((val: T) => T)) => void, () => void] => {\n  const { key, defaultValue } = props;\n\n  const [storedValue, setStoredValue] = useState<T>(() =>\n    getStorageValue(key, defaultValue),\n  );\n\n  const setValue = useCallback(\n    (value: T | ((val: T) => T)) => {\n      try {\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        setStoredValue(valueToStore);\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        console.warn(`Error setting localStorage key \"${key}\":`, error);\n      }\n    },\n    [key, storedValue],\n  );\n\n  const removeValue = useCallback(() => {\n    try {\n      window.localStorage.removeItem(key);\n      setStoredValue(defaultValue);\n    } catch (error) {\n      console.warn(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key, defaultValue]);\n\n  // Synchroniser avec les autres onglets/fenÃªtres\n  useEffect(() => {\n    const handleStorageChange = (event: StorageEvent): void => {\n      if (event.key === key && event.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(event.newValue));\n        } catch {\n          setStoredValue(defaultValue);\n        }\n      } else if (event.key === key) {\n        setStoredValue(defaultValue);\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, [key, defaultValue]);\n\n  return [storedValue, setValue, removeValue] as const;\n};\n"],"names":["getStorageValue","key","defaultValue","item","error","useLocalStorage","props","storedValue","setStoredValue","useState","setValue","useCallback","value","valueToStore","removeValue","useEffect","handleStorageChange","event"],"mappings":";AAOA,SAASA,EAAmBC,GAAaC,GAAoB;AACvD,MAAA,OAAO,SAAW;AACb,WAAAA;AAGL,MAAA;AACF,UAAMC,IAAO,OAAO,aAAa,QAAQF,CAAG;AAC5C,WAAIE,MAAS,OACJD,IAEF,KAAK,MAAMC,CAAI;AAAA,WACfC,GAAO;AACd,mBAAQ,KAAK,mCAAmCH,CAAG,MAAMG,CAAK,GACvDF;AAAA,EAAA;AAEX;AAEa,MAAAG,IAAkB,CAC7BC,MACmE;AAC7D,QAAA,EAAE,KAAAL,GAAK,cAAAC,EAAA,IAAiBI,GAExB,CAACC,GAAaC,CAAc,IAAIC;AAAA,IAAY,MAChDT,EAAgBC,GAAKC,CAAY;AAAA,EACnC,GAEMQ,IAAWC;AAAA,IACf,CAACC,MAA+B;AAC1B,UAAA;AACF,cAAMC,IACJD,aAAiB,WAAWA,EAAML,CAAW,IAAIK;AACnD,QAAAJ,EAAeK,CAAY,GAC3B,OAAO,aAAa,QAAQZ,GAAK,KAAK,UAAUY,CAAY,CAAC;AAAA,eACtDT,GAAO;AACd,gBAAQ,KAAK,mCAAmCH,CAAG,MAAMG,CAAK;AAAA,MAAA;AAAA,IAElE;AAAA,IACA,CAACH,GAAKM,CAAW;AAAA,EACnB,GAEMO,IAAcH,EAAY,MAAM;AAChC,QAAA;AACK,aAAA,aAAa,WAAWV,CAAG,GAClCO,EAAeN,CAAY;AAAA,aACpBE,GAAO;AACd,cAAQ,KAAK,oCAAoCH,CAAG,MAAMG,CAAK;AAAA,IAAA;AAAA,EACjE,GACC,CAACH,GAAKC,CAAY,CAAC;AAGtB,SAAAa,EAAU,MAAM;AACR,UAAAC,IAAsB,CAACC,MAA8B;AACzD,UAAIA,EAAM,QAAQhB,KAAOgB,EAAM,aAAa;AACtC,YAAA;AACF,UAAAT,EAAe,KAAK,MAAMS,EAAM,QAAQ,CAAC;AAAA,QAAA,QACnC;AACN,UAAAT,EAAeN,CAAY;AAAA,QAAA;AAAA,UAE/B,CAAWe,EAAM,QAAQhB,KACvBO,EAAeN,CAAY;AAAA,IAE/B;AAEO,kBAAA,iBAAiB,WAAWc,CAAmB,GAC/C,MAAM,OAAO,oBAAoB,WAAWA,CAAmB;AAAA,EAAA,GACrE,CAACf,GAAKC,CAAY,CAAC,GAEf,CAACK,GAAaG,GAAUI,CAAW;AAC5C;"}