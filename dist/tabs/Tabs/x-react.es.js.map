{"version":3,"file":"x-react.es.js","sources":["../../../src/tabs/Tabs.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { TabsProps as NextUITabsProps } from \"@nextui-org/react\";\nimport { Tabs as TabsRoot, Tab } from \"@nextui-org/react\";\nimport { cn } from \"@/utils\";\n\nexport interface TabItem {\n  key: string;\n  title: React.ReactNode;\n  content: React.ReactNode;\n  disabled?: boolean;\n  href?: string;\n  target?: string;\n  titleValue?: string;\n}\n\ninterface CustomTabsProps extends Omit<NextUITabsProps, \"children\"> {\n  items: TabItem[];\n  defaultActiveTab?: string;\n  onTabChange?: (key: string) => void;\n  renderTabContent?: (item: TabItem) => React.ReactNode;\n}\n\nexport const Tabs = forwardRef<HTMLDivElement, CustomTabsProps>(\n  (\n    {\n      items,\n      defaultActiveTab,\n      onTabChange,\n      renderTabContent,\n      variant = \"solid\",\n      color = \"primary\",\n      size = \"md\",\n      radius = \"md\",\n      fullWidth = false,\n      placement = \"top\",\n      isVertical = false,\n      disableAnimation = false,\n      disableCursorAnimation = false,\n      destroyInactiveTabPanel = true,\n      ...props\n    },\n    ref,\n  ) => {\n    const handleSelectionChange = (key: React.Key): void => {\n      onTabChange?.(key.toString());\n    };\n\n    const defaultContent = (item: TabItem): ReactNode => item.content;\n    const contentRenderer = renderTabContent || defaultContent;\n\n    const getVariantStyles = (): string => {\n      if (variant === \"bordered\") {\n        return \"border-1 border-default\";\n      }\n      return \"\";\n    };\n\n    return (\n      <TabsRoot\n        ref={ref}\n        variant={variant}\n        color={color}\n        size={size}\n        radius={radius}\n        fullWidth={fullWidth}\n        placement={placement}\n        isVertical={isVertical}\n        disableAnimation={disableAnimation}\n        disableCursorAnimation={disableCursorAnimation}\n        destroyInactiveTabPanel={destroyInactiveTabPanel}\n        defaultSelectedKey={defaultActiveTab}\n        classNames={{\n          ...props.classNames,\n          tabList: cn(getVariantStyles(), props.classNames?.tabList),\n        }}\n        onSelectionChange={handleSelectionChange}\n        {...props}\n      >\n        {items.map((item) => (\n          <Tab\n            key={item.key}\n            title={item.title}\n            titleValue={item.titleValue}\n            href={item.href}\n            target={item.target}\n            isDisabled={item.disabled}\n          >\n            {contentRenderer(item)}\n          </Tab>\n        ))}\n      </TabsRoot>\n    );\n  },\n);\n\nTabs.displayName = \"Tabs\";\n"],"names":["jsx","TabsRoot"],"mappings":";;;;AAuBO,MAAM,OAAO;AAAA,EAClB,CACE;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,yBAAyB;AAAA,IACzB,0BAA0B;AAAA,IAC1B,GAAG;AAAA,KAEL,QACG;;AACG,UAAA,wBAAwB,CAAC,QAAyB;AACxC,iDAAA,IAAI;IACpB;AAEM,UAAA,iBAAiB,CAAC,SAA6B,KAAK;AAC1D,UAAM,kBAAkB,oBAAoB;AAE5C,UAAM,mBAAmB,MAAc;AACrC,UAAI,YAAY,YAAY;AACnB,eAAA;AAAA,MAAA;AAEF,aAAA;AAAA,IACT;AAGE,WAAAA,kCAAA;AAAA,MAACC;AAAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,oBAAoB;AAAA,QACpB,YAAY;AAAA,UACV,GAAG,MAAM;AAAA,UACT,SAAS,GAAG,iBAAoB,IAAA,WAAM,eAAN,mBAAkB,OAAO;AAAA,QAC3D;AAAA,QACA,mBAAmB;AAAA,QAClB,GAAG;AAAA,QAEH,UAAA,MAAM,IAAI,CAAC,SACVD,kCAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,OAAO,KAAK;AAAA,YACZ,YAAY,KAAK;AAAA,YACjB,MAAM,KAAK;AAAA,YACX,QAAQ,KAAK;AAAA,YACb,YAAY,KAAK;AAAA,YAEhB,0BAAgB,IAAI;AAAA,UAAA;AAAA,UAPhB,KAAK;AAAA,QASb,CAAA;AAAA,MAAA;AAAA,IACH;AAAA,EAAA;AAGN;AAEA,KAAK,cAAc;"}