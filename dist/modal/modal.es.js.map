{"version":3,"file":"modal.es.js","sources":["../../src/modal/Modal.tsx"],"sourcesContent":["import type { JSX } from \"react\";\nimport { forwardRef, useState, useCallback } from \"react\";\nimport type { ModalProps as ModalPropsRoot } from \"@nextui-org/react\";\nimport {\n  Modal as ModalRoot,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n} from \"@nextui-org/react\";\n\nimport { cn } from \"@/utils\";\nimport { Button, type ButtonProps } from \"@/button\";\n\ntype Backdrop = ModalPropsRoot[\"backdrop\"];\n\ninterface ModalClassNames {\n  wrapper?: string;\n  base?: string;\n  backdrop?: string;\n  header?: string;\n  body?: string;\n  footer?: string;\n  closeButton?: string;\n}\n\ninterface ModalBaseProps {\n  trigger: React.ReactNode;\n  title?: React.ReactNode;\n  footer?: React.ReactNode;\n  children: React.ReactNode;\n  classNames?: ModalClassNames;\n  onOpenChange?: (isOpen: boolean) => void;\n  defaultBackdrop?: Backdrop;\n}\n\ninterface ModalButtonProps {\n  onAction?: () => void | Promise<void>;\n  buttonCloseLabel?: string;\n  buttonActionLabel?: string;\n  buttonCloseProps?: ButtonProps;\n  buttonActionProps?: ButtonProps;\n}\n\nexport type ModalProps = Omit<Partial<ModalPropsRoot>, keyof ModalBaseProps> &\n  ModalBaseProps &\n  ModalButtonProps;\n\nconst defaultClassNames = {\n  closeButton: \"absolute right-4 top-4\",\n  base: \"bg-background border border-default shadow-lg dark:shadow-none rounded-lg\",\n  header: \"flex flex-col gap-1\",\n  footer: \"flex justify-end gap-2\",\n} as const;\n\nconst defaultButtonProps = {\n  color: \"primary\" as const,\n  radius: \"sm\" as const,\n} as const;\n\nconst isValidButtonLabel = (label: unknown): label is string =>\n  typeof label === \"string\" && label.length > 0;\n\ninterface ModalButtonsProps extends ModalButtonProps {\n  onClose: () => void;\n}\n\nconst ModalButtons = ({\n  buttonCloseLabel = \"Close\",\n  buttonActionLabel,\n  buttonCloseProps,\n  buttonActionProps,\n  onAction,\n  onClose,\n}: ModalButtonsProps): JSX.Element => {\n  const handleAction = async (): Promise<void> => {\n    try {\n      await onAction?.();\n      onClose();\n    } catch (error) {\n      console.error(\"Modal action failed:\", error);\n    }\n  };\n\n  const hasValidCloseLabel = isValidButtonLabel(buttonCloseLabel);\n  const hasValidActionButton =\n    isValidButtonLabel(buttonActionLabel) && onAction !== undefined;\n\n  return (\n    <>\n      {hasValidCloseLabel && (\n        <Button\n          className={cn(\"border-primary/50\", buttonCloseProps?.className)}\n          variant={buttonCloseProps?.variant ?? \"bordered\"}\n          onPress={onClose}\n          {...defaultButtonProps}\n          {...buttonCloseProps}\n        >\n          {buttonCloseLabel}\n        </Button>\n      )}\n\n      {hasValidActionButton && (\n        <Button\n          onPress={handleAction}\n          {...defaultButtonProps}\n          {...buttonActionProps}\n        >\n          {buttonActionLabel}\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport const Modal = forwardRef<HTMLDivElement, ModalProps>(\n  (\n    {\n      trigger,\n      title,\n      footer,\n      children,\n      onAction,\n      buttonCloseLabel,\n      buttonActionLabel,\n      buttonCloseProps,\n      buttonActionProps,\n      defaultBackdrop = \"opaque\",\n      onOpenChange,\n      classNames,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen, onOpen, onClose } = useDisclosure({\n      onChange: onOpenChange,\n    });\n    const [backdrop, setBackdrop] = useState<Backdrop>(defaultBackdrop);\n\n    const handleOpen = useCallback(\n      (backdropType: Backdrop = defaultBackdrop): void => {\n        setBackdrop(backdropType);\n        onOpen();\n      },\n      [defaultBackdrop, onOpen],\n    );\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>): void => {\n        if (event.key === \"Enter\" || event.key === \" \") {\n          event.preventDefault();\n          handleOpen();\n        }\n      },\n      [handleOpen],\n    );\n\n    const modalClassNames = {\n      closeButton: cn(defaultClassNames.closeButton, classNames?.closeButton),\n      base: cn(defaultClassNames.base, classNames?.base),\n      header: cn(defaultClassNames.header, classNames?.header),\n      body: cn(classNames?.body),\n      footer: cn(defaultClassNames.footer, classNames?.footer),\n      backdrop: cn(classNames?.backdrop),\n    };\n\n    return (\n      <>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => handleOpen()}\n          onKeyDown={handleKeyDown}\n          className=\"inline-block\"\n        >\n          {trigger}\n        </div>\n\n        <ModalRoot\n          ref={ref}\n          backdrop={backdrop}\n          classNames={modalClassNames}\n          isOpen={isOpen}\n          onClose={onClose}\n          {...props}\n        >\n          <ModalContent>\n            {() => (\n              <>\n                {title !== undefined && (\n                  <ModalHeader className={modalClassNames.header}>\n                    {title}\n                  </ModalHeader>\n                )}\n                <ModalBody className={modalClassNames.body}>\n                  {children}\n                </ModalBody>\n                <ModalFooter className={modalClassNames.footer}>\n                  {footer !== undefined ? (\n                    footer\n                  ) : (\n                    <ModalButtons\n                      buttonCloseLabel={buttonCloseLabel}\n                      buttonActionLabel={buttonActionLabel}\n                      buttonCloseProps={buttonCloseProps}\n                      buttonActionProps={buttonActionProps}\n                      onAction={onAction}\n                      onClose={onClose}\n                    />\n                  )}\n                </ModalFooter>\n              </>\n            )}\n          </ModalContent>\n        </ModalRoot>\n      </>\n    );\n  },\n);\n\nModal.displayName = \"Modal\";\n"],"names":["ModalRoot"],"mappings":"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"}