{"version":3,"file":"index.js","sources":["../../../src/modal/Modal.tsx"],"sourcesContent":["import type { JSX } from \"react\";\nimport { forwardRef, useState, useCallback } from \"react\";\nimport type { ModalProps as ModalPropsRoot } from \"@nextui-org/react\";\nimport {\n  Modal as ModalRoot,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n} from \"@nextui-org/react\";\n\nimport { cn } from \"@/utils\";\nimport { Button, type ButtonProps } from \"@/button\";\n\ntype Backdrop = ModalPropsRoot[\"backdrop\"];\n\ninterface ModalClassNames {\n  wrapper?: string;\n  base?: string;\n  backdrop?: string;\n  header?: string;\n  body?: string;\n  footer?: string;\n  closeButton?: string;\n}\n\ninterface ModalBaseProps {\n  trigger: React.ReactNode;\n  title?: React.ReactNode;\n  footer?: React.ReactNode;\n  children: React.ReactNode;\n  classNames?: ModalClassNames;\n  onOpenChange?: (isOpen: boolean) => void;\n  defaultBackdrop?: Backdrop;\n}\n\ninterface ModalButtonProps {\n  onAction?: () => void | Promise<void>;\n  buttonCloseLabel?: string;\n  buttonActionLabel?: string;\n  buttonCloseProps?: ButtonProps;\n  buttonActionProps?: ButtonProps;\n}\n\nexport type ModalProps = Omit<Partial<ModalPropsRoot>, keyof ModalBaseProps> &\n  ModalBaseProps &\n  ModalButtonProps;\n\nconst defaultClassNames = {\n  closeButton: \"absolute right-4 top-4\",\n  base: \"bg-background border border-default shadow-lg dark:shadow-none rounded-lg\",\n  header: \"flex flex-col gap-1\",\n  footer: \"flex justify-end gap-2\",\n} as const;\n\nconst defaultButtonProps = {\n  color: \"primary\" as const,\n  radius: \"sm\" as const,\n} as const;\n\nconst isValidButtonLabel = (label: unknown): label is string =>\n  typeof label === \"string\" && label.length > 0;\n\ninterface ModalButtonsProps extends ModalButtonProps {\n  onClose: () => void;\n}\n\nconst ModalButtons = ({\n  buttonCloseLabel = \"Close\",\n  buttonActionLabel,\n  buttonCloseProps,\n  buttonActionProps,\n  onAction,\n  onClose,\n}: ModalButtonsProps): JSX.Element => {\n  const handleAction = async (): Promise<void> => {\n    try {\n      await onAction?.();\n      onClose();\n    } catch (error) {\n      console.error(\"Modal action failed:\", error);\n    }\n  };\n\n  const hasValidCloseLabel = isValidButtonLabel(buttonCloseLabel);\n  const hasValidActionButton =\n    isValidButtonLabel(buttonActionLabel) && onAction !== undefined;\n\n  return (\n    <>\n      {hasValidCloseLabel && (\n        <Button\n          className={cn(\"border-primary/50\", buttonCloseProps?.className)}\n          variant={buttonCloseProps?.variant ?? \"bordered\"}\n          onPress={onClose}\n          {...defaultButtonProps}\n          {...buttonCloseProps}\n        >\n          {buttonCloseLabel}\n        </Button>\n      )}\n\n      {hasValidActionButton && (\n        <Button\n          onPress={handleAction}\n          {...defaultButtonProps}\n          {...buttonActionProps}\n        >\n          {buttonActionLabel}\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport const Modal = forwardRef<HTMLDivElement, ModalProps>(\n  (\n    {\n      trigger,\n      title,\n      footer,\n      children,\n      onAction,\n      buttonCloseLabel,\n      buttonActionLabel,\n      buttonCloseProps,\n      buttonActionProps,\n      defaultBackdrop = \"opaque\",\n      onOpenChange,\n      classNames,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen, onOpen, onClose } = useDisclosure({\n      onChange: onOpenChange,\n    });\n    const [backdrop, setBackdrop] = useState<Backdrop>(defaultBackdrop);\n\n    const handleOpen = useCallback(\n      (backdropType: Backdrop = defaultBackdrop): void => {\n        setBackdrop(backdropType);\n        onOpen();\n      },\n      [defaultBackdrop, onOpen],\n    );\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>): void => {\n        if (event.key === \"Enter\" || event.key === \" \") {\n          event.preventDefault();\n          handleOpen();\n        }\n      },\n      [handleOpen],\n    );\n\n    const modalClassNames = {\n      closeButton: cn(defaultClassNames.closeButton, classNames?.closeButton),\n      base: cn(defaultClassNames.base, classNames?.base),\n      header: cn(defaultClassNames.header, classNames?.header),\n      body: cn(classNames?.body),\n      footer: cn(defaultClassNames.footer, classNames?.footer),\n      backdrop: cn(classNames?.backdrop),\n    };\n\n    return (\n      <>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => handleOpen()}\n          onKeyDown={handleKeyDown}\n          className=\"inline-block\"\n        >\n          {trigger}\n        </div>\n\n        <ModalRoot\n          ref={ref}\n          backdrop={backdrop}\n          classNames={modalClassNames}\n          isOpen={isOpen}\n          onClose={onClose}\n          {...props}\n        >\n          <ModalContent>\n            {() => (\n              <>\n                {title !== undefined && (\n                  <ModalHeader className={modalClassNames.header}>\n                    {title}\n                  </ModalHeader>\n                )}\n                <ModalBody className={modalClassNames.body}>\n                  {children}\n                </ModalBody>\n                <ModalFooter className={modalClassNames.footer}>\n                  {footer !== undefined ? (\n                    footer\n                  ) : (\n                    <ModalButtons\n                      buttonCloseLabel={buttonCloseLabel}\n                      buttonActionLabel={buttonActionLabel}\n                      buttonCloseProps={buttonCloseProps}\n                      buttonActionProps={buttonActionProps}\n                      onAction={onAction}\n                      onClose={onClose}\n                    />\n                  )}\n                </ModalFooter>\n              </>\n            )}\n          </ModalContent>\n        </ModalRoot>\n      </>\n    );\n  },\n);\n\nModal.displayName = \"Modal\";\n"],"names":["defaultClassNames","defaultButtonProps","isValidButtonLabel","label","ModalButtons","buttonCloseLabel","buttonActionLabel","buttonCloseProps","buttonActionProps","onAction","onClose","handleAction","error","hasValidCloseLabel","hasValidActionButton","jsxs","Fragment","jsx","Button","cn","Modal","forwardRef","trigger","title","footer","children","defaultBackdrop","onOpenChange","classNames","props","ref","isOpen","onOpen","useDisclosure","backdrop","setBackdrop","useState","handleOpen","useCallback","backdropType","handleKeyDown","event","modalClassNames","ModalRoot","ModalContent","ModalHeader","ModalBody","ModalFooter"],"mappings":"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"}