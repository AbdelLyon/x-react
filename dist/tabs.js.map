{"version":3,"sources":["../src/utils/index.ts","../src/tabs/Tabs.tsx"],"names":["TabsRoot"],"mappings":";;;;;;;AAGO,IAAM,EAAA,GAAK,IAAI,MAAiC,KAAA;AACrD,EAAO,OAAA,OAAA,CAAQ,IAAK,CAAA,MAAM,CAAC,CAAA;AAC7B,CAAA;ACkBO,IAAM,IAAO,GAAA,UAAA;AAAA,EAClB,CACE;AAAA,IACE,KAAA;AAAA,IACA,gBAAA;AAAA,IACA,WAAA;AAAA,IACA,gBAAA;AAAA,IACA,OAAU,GAAA,OAAA;AAAA,IACV,KAAQ,GAAA,SAAA;AAAA,IACR,IAAO,GAAA,IAAA;AAAA,IACP,MAAS,GAAA,IAAA;AAAA,IACT,SAAY,GAAA,KAAA;AAAA,IACZ,SAAY,GAAA,KAAA;AAAA,IACZ,UAAa,GAAA,KAAA;AAAA,IACb,gBAAmB,GAAA,KAAA;AAAA,IACnB,sBAAyB,GAAA,KAAA;AAAA,IACzB,uBAA0B,GAAA,IAAA;AAAA,IAC1B,GAAG;AAAA,KAEL,GACG,KAAA;AACH,IAAM,MAAA,qBAAA,GAAwB,CAAC,GAAyB,KAAA;AACtD,MAAc,WAAA,GAAA,GAAA,CAAI,UAAU,CAAA;AAAA,KAC9B;AAEA,IAAM,MAAA,cAAA,GAAiB,CAAC,IAAA,KAA6B,IAAK,CAAA,OAAA;AAC1D,IAAA,MAAM,kBAAkB,gBAAoB,IAAA,cAAA;AAE5C,IAAA,MAAM,mBAAmB,MAAc;AACrC,MAAA,IAAI,YAAY,UAAY,EAAA;AAC1B,QAAO,OAAA,yBAAA;AAAA;AAET,MAAO,OAAA,EAAA;AAAA,KACT;AAEA,IACE,uBAAA,GAAA;AAAA,MAACA,MAAA;AAAA,MAAA;AAAA,QACC,GAAA;AAAA,QACA,OAAA;AAAA,QACA,KAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAA;AAAA,QACA,SAAA;AAAA,QACA,SAAA;AAAA,QACA,UAAA;AAAA,QACA,gBAAA;AAAA,QACA,sBAAA;AAAA,QACA,uBAAA;AAAA,QACA,kBAAoB,EAAA,gBAAA;AAAA,QACpB,UAAY,EAAA;AAAA,UACV,GAAG,KAAM,CAAA,UAAA;AAAA,UACT,SAAS,EAAG,CAAA,gBAAA,EAAoB,EAAA,KAAA,CAAM,YAAY,OAAO;AAAA,SAC3D;AAAA,QACA,iBAAmB,EAAA,qBAAA;AAAA,QAClB,GAAG,KAAA;AAAA,QAEH,QAAA,EAAA,KAAA,CAAM,GAAI,CAAA,CAAC,IACV,qBAAA,GAAA;AAAA,UAAC,GAAA;AAAA,UAAA;AAAA,YAEC,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,YAAY,IAAK,CAAA,UAAA;AAAA,YACjB,MAAM,IAAK,CAAA,IAAA;AAAA,YACX,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,YAAY,IAAK,CAAA,QAAA;AAAA,YAEhB,0BAAgB,IAAI;AAAA,WAAA;AAAA,UAPhB,IAAK,CAAA;AAAA,SASb;AAAA;AAAA,KACH;AAAA;AAGN;AAEA,IAAA,CAAK,WAAc,GAAA,MAAA","file":"tabs.js","sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport const cn = (...inputs: ClassValue[]): string => {\n  return twMerge(clsx(inputs));\n};\n\nexport const capitalizeFirstLetter = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const concatenateWithSpace = (\n  ...strings: (string | undefined)[]\n): string => strings.filter(Boolean).join(\" \");\n\nexport const startsWith = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\n\nexport const endsWith = (str: string, suffix: string): boolean =>\n  str.endsWith(suffix);\n\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\nexport const trim = (str: string): string => str.trim();\n\nexport const reverse = (str: string): string =>\n  str.split(\"\").reverse().join(\"\");\n\nexport const limitValue = (\n  value: number,\n  min: number | undefined,\n  max: number | undefined,\n): number => {\n  if (min === undefined && max === undefined) {\n    return value;\n  }\n\n  if (min !== undefined && max === undefined) {\n    return Math.max(value, min);\n  }\n\n  if (min === undefined && max !== undefined) {\n    return Math.min(value, max);\n  }\n\n  if (min !== undefined && max !== undefined) {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  return value;\n};\n\ntype DebouncedFunction<Args extends unknown[]> = {\n  (...args: Args): void;\n  cancel: () => void;\n};\n\n//debounce function\nexport function debounce<\n  Callback extends (...args: never[]) => unknown,\n  Args extends Parameters<Callback>,\n>(callback: Callback, delay = 0): DebouncedFunction<Args> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let latestArgs: Args | undefined;\n\n  function debouncedFn(this: unknown, ...args: Args): void {\n    latestArgs = args;\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      if (latestArgs) {\n        callback.apply(this, latestArgs);\n      }\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }, delay);\n  }\n\n  debouncedFn.cancel = function cancel(): void {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }\n  };\n\n  return debouncedFn;\n}\n","import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { TabsProps as NextUITabsProps } from \"@nextui-org/react\";\nimport { Tabs as TabsRoot, Tab } from \"@nextui-org/react\";\nimport { cn } from \"@/utils\";\n\nexport interface TabItem {\n  key: string;\n  title: React.ReactNode;\n  content: React.ReactNode;\n  disabled?: boolean;\n  href?: string;\n  target?: string;\n  titleValue?: string;\n}\n\ninterface CustomTabsProps extends Omit<NextUITabsProps, \"children\"> {\n  items: TabItem[];\n  defaultActiveTab?: string;\n  onTabChange?: (key: string) => void;\n  renderTabContent?: (item: TabItem) => React.ReactNode;\n}\n\nexport const Tabs = forwardRef<HTMLDivElement, CustomTabsProps>(\n  (\n    {\n      items,\n      defaultActiveTab,\n      onTabChange,\n      renderTabContent,\n      variant = \"solid\",\n      color = \"primary\",\n      size = \"md\",\n      radius = \"md\",\n      fullWidth = false,\n      placement = \"top\",\n      isVertical = false,\n      disableAnimation = false,\n      disableCursorAnimation = false,\n      destroyInactiveTabPanel = true,\n      ...props\n    },\n    ref,\n  ) => {\n    const handleSelectionChange = (key: React.Key): void => {\n      onTabChange?.(key.toString());\n    };\n\n    const defaultContent = (item: TabItem): ReactNode => item.content;\n    const contentRenderer = renderTabContent || defaultContent;\n\n    const getVariantStyles = (): string => {\n      if (variant === \"bordered\") {\n        return \"border-1 border-default\";\n      }\n      return \"\";\n    };\n\n    return (\n      <TabsRoot\n        ref={ref}\n        variant={variant}\n        color={color}\n        size={size}\n        radius={radius}\n        fullWidth={fullWidth}\n        placement={placement}\n        isVertical={isVertical}\n        disableAnimation={disableAnimation}\n        disableCursorAnimation={disableCursorAnimation}\n        destroyInactiveTabPanel={destroyInactiveTabPanel}\n        defaultSelectedKey={defaultActiveTab}\n        classNames={{\n          ...props.classNames,\n          tabList: cn(getVariantStyles(), props.classNames?.tabList),\n        }}\n        onSelectionChange={handleSelectionChange}\n        {...props}\n      >\n        {items.map((item) => (\n          <Tab\n            key={item.key}\n            title={item.title}\n            titleValue={item.titleValue}\n            href={item.href}\n            target={item.target}\n            isDisabled={item.disabled}\n          >\n            {contentRenderer(item)}\n          </Tab>\n        ))}\n      </TabsRoot>\n    );\n  },\n);\n\nTabs.displayName = \"Tabs\";\n"]}