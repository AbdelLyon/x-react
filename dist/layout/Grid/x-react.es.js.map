{"version":3,"file":"x-react.es.js","sources":["../../../src/layout/Grid.tsx"],"sourcesContent":["import type { ReactNode, ForwardedRef } from \"react\";\nimport { forwardRef } from \"react\";\nimport { cn } from \"@/utils\";\n\n// Types pour les donn√©es du tableau\nexport type GridData = {\n  id: string | number;\n  content: ReactNode;\n  colSpan?: {\n    default?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n  };\n};\n\ninterface GridProps {\n  children?: ReactNode;\n  data?: GridData[];\n  columns?: {\n    default?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n  };\n  gap?: {\n    x?: number;\n    y?: number;\n  };\n  className?: string;\n}\n\nexport const Grid = forwardRef(\n  (\n    {\n      children,\n      data,\n      columns = {\n        default: 1,\n        sm: 2,\n        md: 3,\n        lg: 4,\n        xl: 4,\n      },\n      gap = {\n        x: 4,\n        y: 4,\n      },\n      className,\n    }: GridProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const gridClasses = cn(\n      \"grid\",\n      `grid-cols-${columns.default}`,\n      columns.sm !== undefined && `sm:grid-cols-${columns.sm}`,\n      columns.md !== undefined && `md:grid-cols-${columns.md}`,\n      columns.lg !== undefined && `lg:grid-cols-${columns.lg}`,\n      columns.xl !== undefined && `xl:grid-cols-${columns.xl}`,\n      gap.x !== undefined && `gap-x-${gap.x}`,\n      gap.y !== undefined && `gap-y-${gap.y}`,\n      className,\n    );\n\n    return (\n      <div ref={ref} className={gridClasses}>\n        {data\n          ? data.map((item) => (\n              <GridItem key={item.id} colSpan={item.colSpan}>\n                {item.content}\n              </GridItem>\n            ))\n          : children}\n      </div>\n    );\n  },\n);\n\nGrid.displayName = \"Grid\";\n\ninterface GridItemProps {\n  children: ReactNode;\n  colSpan?: {\n    default?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n  };\n  className?: string;\n}\n\nexport const GridItem = forwardRef(\n  (\n    { children, colSpan, className }: GridItemProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const itemClasses = cn(\n      colSpan?.default !== undefined && `col-span-${colSpan.default}`,\n      colSpan?.sm !== undefined && `sm:col-span-${colSpan.sm}`,\n      colSpan?.md !== undefined && `md:col-span-${colSpan.md}`,\n      colSpan?.lg !== undefined && `lg:col-span-${colSpan.lg}`,\n      colSpan?.xl !== undefined && `xl:col-span-${colSpan.xl}`,\n      className,\n    );\n\n    return (\n      <div ref={ref} className={itemClasses}>\n        {children}\n      </div>\n    );\n  },\n);\n\nGridItem.displayName = \"GridItem\";\n"],"names":[],"mappings":";;;AAkCO,MAAM,OAAO;AAAA,EAClB,CACE;AAAA,IACE;AAAA,IACA;AAAA,IACA,UAAU;AAAA,MACR,SAAS;AAAA,MACT,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACN;AAAA,IACA,MAAM;AAAA,MACJ,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,IACA;AAAA,KAEF,QACG;AACH,UAAM,cAAc;AAAA,MAClB;AAAA,MACA,aAAa,QAAQ,OAAO;AAAA,MAC5B,QAAQ,OAAO,UAAa,gBAAgB,QAAQ,EAAE;AAAA,MACtD,QAAQ,OAAO,UAAa,gBAAgB,QAAQ,EAAE;AAAA,MACtD,QAAQ,OAAO,UAAa,gBAAgB,QAAQ,EAAE;AAAA,MACtD,QAAQ,OAAO,UAAa,gBAAgB,QAAQ,EAAE;AAAA,MACtD,IAAI,MAAM,UAAa,SAAS,IAAI,CAAC;AAAA,MACrC,IAAI,MAAM,UAAa,SAAS,IAAI,CAAC;AAAA,MACrC;AAAA,IACF;AAGE,WAAA,oBAAC,SAAI,KAAU,WAAW,aACvB,UACG,OAAA,KAAK,IAAI,CAAC,6BACP,UAAuB,EAAA,SAAS,KAAK,SACnC,UAAA,KAAK,WADO,KAAK,EAEpB,CACD,IACD,SACN,CAAA;AAAA,EAAA;AAGN;AAEA,KAAK,cAAc;AAcZ,MAAM,WAAW;AAAA,EACtB,CACE,EAAE,UAAU,SAAS,UAAA,GACrB,QACG;AACH,UAAM,cAAc;AAAA,OAClB,mCAAS,aAAY,UAAa,YAAY,QAAQ,OAAO;AAAA,OAC7D,mCAAS,QAAO,UAAa,eAAe,QAAQ,EAAE;AAAA,OACtD,mCAAS,QAAO,UAAa,eAAe,QAAQ,EAAE;AAAA,OACtD,mCAAS,QAAO,UAAa,eAAe,QAAQ,EAAE;AAAA,OACtD,mCAAS,QAAO,UAAa,eAAe,QAAQ,EAAE;AAAA,MACtD;AAAA,IACF;AAEA,WACG,oBAAA,OAAA,EAAI,KAAU,WAAW,aACvB,UACH;AAAA,EAAA;AAGN;AAEA,SAAS,cAAc;"}