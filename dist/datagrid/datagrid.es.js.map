{"version":3,"file":"datagrid.es.js","sources":["../../src/datagrid/useDataGridState.ts","../../src/data/default.ts","../../src/datagrid/DataGridSkeleton.tsx","../../src/datagrid/DataGrid.tsx"],"sourcesContent":["import type { ColumnDefinition, ExtendedColumn } from \"@/types/datagrid\";\nimport type { Key } from \"react\";\nimport { useState } from \"react\";\n\n// types.ts\ntype RowIdentifier = string | number;\ntype DataGridRow = { id: RowIdentifier };\ntype SortOrder = \"asc\" | \"desc\";\n\ninterface SortConfig<T> {\n  field: keyof T | null;\n  direction: SortOrder;\n}\n\ninterface DataGridState<T> {\n  sortConfig: SortConfig<T>;\n  processedColumns: ExtendedColumn<T>[];\n  onSort: (column: ExtendedColumn<T>) => void;\n  extractCellValue: (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ) => React.ReactNode;\n  extractColumnHeader: (column: ExtendedColumn<T>) => string;\n  formatSortHeader: (header: React.ReactNode) => string;\n  handleGridScroll: (e: React.UIEvent<HTMLDivElement>) => void;\n}\n\ninterface DataGridProps<T> {\n  rows: T[];\n  columns: ColumnDefinition<T>[];\n  onRowSelectionChange?: (selectedRows: T[]) => void;\n  onSortChange?: (field: keyof T, order: SortOrder) => void;\n  onGridScrollEnd?: () => void;\n}\n\nexport const useDataGridState = <T extends DataGridRow>({\n  columns,\n  onSortChange,\n  onGridScrollEnd,\n}: Pick<\n  DataGridProps<T>,\n  \"columns\" | \"onSortChange\" | \"onGridScrollEnd\"\n>): DataGridState<T> => {\n  const [sortConfig, setSortConfig] = useState<SortConfig<T>>({\n    field: null,\n    direction: \"asc\",\n  });\n\n  const processedColumns = columns.map((column, index) => ({\n    ...column,\n    key:\n      typeof column.field === \"string\" ? String(column.field) : String(index),\n    header: column.header,\n  }));\n\n  const extractColumnHeader = (column: ExtendedColumn<T>): string => {\n    return typeof column.header === \"string\" && column.header.length > 0\n      ? column.header\n      : typeof column.key === \"string\" && column.key.length > 0\n        ? column.key\n        : \"Column\";\n  };\n\n  const formatSortHeader = (header: React.ReactNode): string => {\n    return typeof header === \"string\" && header.length > 0\n      ? `Sort by ${header}`\n      : \"Sort column\";\n  };\n\n  const extractCellValue = (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ): React.ReactNode => {\n    const column = columns.find(\n      (c) =>\n        typeof c.field === \"string\" && String(c.field) === String(columnKey),\n    );\n\n    if (column === undefined) {\n      return null;\n    }\n\n    if (column.cell !== undefined) {\n      return column.cell(row);\n    }\n\n    if (\n      typeof column.field === \"string\" &&\n      column.field.length > 0 &&\n      column.field in row\n    ) {\n      const value = row[column.field as keyof T];\n      return typeof value === \"string\" || typeof value === \"number\"\n        ? String(value)\n        : null;\n    }\n\n    return null;\n  };\n\n  const onSort = (column: ExtendedColumn<T>): void => {\n    const matchedColumn = columns.find(\n      (c) =>\n        typeof c.field === \"string\" &&\n        c.field.length > 0 &&\n        String(c.field) === column.key,\n    );\n\n    const columnField = matchedColumn?.field;\n\n    if (columnField !== undefined && columnField !== \"actions\") {\n      setSortConfig({\n        field: columnField,\n        direction: sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      });\n      onSortChange?.(\n        columnField,\n        sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      );\n    }\n  };\n\n  const handleGridScroll = (e: React.UIEvent<HTMLDivElement>): void => {\n    const element = e.currentTarget;\n\n    if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\n      onGridScrollEnd?.();\n    }\n  };\n\n  return {\n    sortConfig,\n    onSort,\n    extractCellValue,\n    extractColumnHeader,\n    formatSortHeader,\n    processedColumns,\n    handleGridScroll,\n  };\n};\n","export const GRID_VARIANTS = {\n  bordered: {\n    thead: \"bg-content2\",\n    th: \"py4 bg-content2 py-4 h-12\",\n    tr: \"py-4 border-b border-default last:border-b-0 hover:bg-content2 h-12\",\n  },\n  striped: {\n    thead: \"bg-content2\",\n    th: \"py4 bg-content2 py-4 h-12\",\n    tr: \"py-4 even:bg-content2 h-12\",\n  },\n  unstyled: {\n    thead: \"bg-content2\",\n    th: \"py4 bg-content2 py-4 h-12\",\n    tr: \"py-4 hover:bg-content2 h-12\",\n  },\n};\n","import { Skeleton } from \"@nextui-org/react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/react\";\nimport { cn } from \"@/utils\";\nimport type { JSX } from \"react\";\nimport { GRID_VARIANTS } from \"@/data/default\";\n\ninterface DataGridSkeletonProps {\n  columns: number;\n  rows: number;\n  checkboxSelection?: boolean;\n  variant?: \"bordered\" | \"striped\" | \"unstyled\";\n  className?: string;\n}\n\nexport const DataGridSkeleton = ({\n  columns = 5,\n  rows = 5,\n  checkboxSelection = true,\n  variant = \"unstyled\",\n  className,\n}: DataGridSkeletonProps): JSX.Element => {\n  const variantClasses = GRID_VARIANTS[variant];\n  const actualColumns = checkboxSelection ? columns + 1 : columns;\n\n  return (\n    <Table radius=\"sm\" aria-label=\"Loading data\" className={className}>\n      <TableHeader className={cn(variantClasses.thead)}>\n        {Array(actualColumns)\n          .fill(null)\n          .map((_, index) => (\n            <TableColumn key={index} className={cn(variantClasses.th)}>\n              {index === 0 && checkboxSelection ? (\n                <Skeleton className=\"size-4 rounded-md\" />\n              ) : (\n                <Skeleton className=\"h-4 w-24 rounded-md\" />\n              )}\n            </TableColumn>\n          ))}\n      </TableHeader>\n\n      <TableBody>\n        {Array(rows)\n          .fill(null)\n          .map((_, rowIndex) => (\n            <TableRow key={rowIndex} className={cn(variantClasses.tr)}>\n              {Array(actualColumns)\n                .fill(null)\n                .map((_, colIndex) => (\n                  <TableCell key={colIndex}>\n                    {colIndex === 0 && checkboxSelection ? (\n                      <Skeleton className=\"size-4 rounded-md\" />\n                    ) : (\n                      <Skeleton className=\"h-4 w-full max-w-[200px] rounded-md\" />\n                    )}\n                  </TableCell>\n                ))}\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};\n","import { useDataGridState } from \"@/datagrid/useDataGridState\";\nimport { cn } from \"@/utils\";\nimport {\n  Table as DataTable,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/react\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport type { JSX } from \"react\";\nimport { DataGridSkeleton } from \"./DataGridSkeleton\";\nimport type { DataGridProps } from \"@/types/datagrid\";\nimport { GRID_VARIANTS } from \"@/data/default\";\n\nexport function DataGrid<T extends { id: string | number }>({\n  rows,\n  columns,\n  onSortChange,\n  variant = \"unstyled\",\n  isLoading = false,\n  onGridScrollEnd,\n  childrenProps,\n  ...props\n}: DataGridProps<T>): JSX.Element {\n  const {\n    sortConfig,\n    processedColumns,\n    formatSortHeader,\n    extractCellValue,\n    extractColumnHeader,\n    onSort,\n    handleGridScroll,\n  } = useDataGridState({\n    onSortChange,\n    columns,\n    onGridScrollEnd,\n  });\n\n  const variantClasses = GRID_VARIANTS[variant];\n\n  if (isLoading) {\n    return (\n      <DataGridSkeleton\n        columns={columns.length}\n        checkboxSelection={props.showSelectionCheckboxes}\n        variant={variant}\n        rows={rows.length}\n      />\n    );\n  }\n\n  return (\n    <DataTable\n      aria-label=\"data-grid\"\n      {...props}\n      classNames={{\n        ...props.classNames,\n        th: cn(variantClasses.th, props.classNames?.th),\n        tr: cn(variantClasses.tr, props.classNames?.tr),\n      }}\n      onScroll={handleGridScroll}\n    >\n      <TableHeader\n        columns={processedColumns}\n        {...childrenProps?.tableHeaderProps}\n      >\n        {(column) => (\n          <TableColumn\n            key={column.key}\n            aria-label={extractColumnHeader(column)}\n            {...childrenProps?.tableColumnProps}\n          >\n            <div className=\"flex items-center gap-2\">\n              {column.header}\n              {column.sortable !== false && (\n                <div\n                  className={cn(\"relative size-4 cursor-pointer\")}\n                  onClick={() => onSort(column)}\n                  role=\"button\"\n                  aria-label={formatSortHeader(column.header)}\n                >\n                  <IconChevronUp\n                    size={16}\n                    className={cn(\n                      \"absolute -top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"asc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                  <IconChevronDown\n                    size={16}\n                    className={cn(\n                      \"absolute top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"desc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody items={rows} {...childrenProps?.tableBodyProps}>\n        {(row: T) => {\n          return (\n            <TableRow key={row.id} {...childrenProps?.tableRowProps}>\n              {(columnKey) => (\n                <TableCell {...childrenProps?.tableCellProps}>\n                  {extractCellValue(columnKey, row, columns)}\n                </TableCell>\n              )}\n            </TableRow>\n          );\n        }}\n      </TableBody>\n    </DataTable>\n  );\n}\n"],"names":["columns","_","DataTable","_a","_b"],"mappings":"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"}