{"version":3,"file":"index.js","sources":["../../../src/datagrid/useDataGridState.ts"],"sourcesContent":["import type { ColumnDefinition, ExtendedColumn } from \"@/types/datagrid\";\nimport type { Key } from \"react\";\nimport { useState } from \"react\";\n\n// types.ts\ntype RowIdentifier = string | number;\ntype DataGridRow = { id: RowIdentifier };\ntype SortOrder = \"asc\" | \"desc\";\n\ninterface SortConfig<T> {\n  field: keyof T | null;\n  direction: SortOrder;\n}\n\ninterface DataGridState<T> {\n  sortConfig: SortConfig<T>;\n  processedColumns: ExtendedColumn<T>[];\n  onSort: (column: ExtendedColumn<T>) => void;\n  extractCellValue: (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ) => React.ReactNode;\n  extractColumnHeader: (column: ExtendedColumn<T>) => string;\n  formatSortHeader: (header: React.ReactNode) => string;\n  handleGridScroll: (e: React.UIEvent<HTMLDivElement>) => void;\n}\n\ninterface DataGridProps<T> {\n  rows: T[];\n  columns: ColumnDefinition<T>[];\n  onRowSelectionChange?: (selectedRows: T[]) => void;\n  onSortChange?: (field: keyof T, order: SortOrder) => void;\n  onGridScrollEnd?: () => void;\n}\n\nexport const useDataGridState = <T extends DataGridRow>({\n  columns,\n  onSortChange,\n  onGridScrollEnd,\n}: Pick<\n  DataGridProps<T>,\n  \"columns\" | \"onSortChange\" | \"onGridScrollEnd\"\n>): DataGridState<T> => {\n  const [sortConfig, setSortConfig] = useState<SortConfig<T>>({\n    field: null,\n    direction: \"asc\",\n  });\n\n  const processedColumns = columns.map((column, index) => ({\n    ...column,\n    key:\n      typeof column.field === \"string\" ? String(column.field) : String(index),\n    header: column.header,\n  }));\n\n  const extractColumnHeader = (column: ExtendedColumn<T>): string => {\n    return typeof column.header === \"string\" && column.header.length > 0\n      ? column.header\n      : typeof column.key === \"string\" && column.key.length > 0\n        ? column.key\n        : \"Column\";\n  };\n\n  const formatSortHeader = (header: React.ReactNode): string => {\n    return typeof header === \"string\" && header.length > 0\n      ? `Sort by ${header}`\n      : \"Sort column\";\n  };\n\n  const extractCellValue = (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ): React.ReactNode => {\n    const column = columns.find(\n      (c) =>\n        typeof c.field === \"string\" && String(c.field) === String(columnKey),\n    );\n\n    if (column === undefined) {\n      return null;\n    }\n\n    if (column.cell !== undefined) {\n      return column.cell(row);\n    }\n\n    if (\n      typeof column.field === \"string\" &&\n      column.field.length > 0 &&\n      column.field in row\n    ) {\n      const value = row[column.field as keyof T];\n      return typeof value === \"string\" || typeof value === \"number\"\n        ? String(value)\n        : null;\n    }\n\n    return null;\n  };\n\n  const onSort = (column: ExtendedColumn<T>): void => {\n    const matchedColumn = columns.find(\n      (c) =>\n        typeof c.field === \"string\" &&\n        c.field.length > 0 &&\n        String(c.field) === column.key,\n    );\n\n    const columnField = matchedColumn?.field;\n\n    if (columnField !== undefined && columnField !== \"actions\") {\n      setSortConfig({\n        field: columnField,\n        direction: sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      });\n      onSortChange?.(\n        columnField,\n        sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      );\n    }\n  };\n\n  const handleGridScroll = (e: React.UIEvent<HTMLDivElement>): void => {\n    const element = e.currentTarget;\n\n    if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\n      onGridScrollEnd?.();\n    }\n  };\n\n  return {\n    sortConfig,\n    onSort,\n    extractCellValue,\n    extractColumnHeader,\n    formatSortHeader,\n    processedColumns,\n    handleGridScroll,\n  };\n};\n"],"names":["useDataGridState","columns","onSortChange","onGridScrollEnd","sortConfig","setSortConfig","useState","processedColumns","column","index","columnField","c","columnKey","row","value","header","element"],"mappings":";AAoCO,MAAMA,IAAmB,CAAwB;AAAA,EACtD,SAAAC;AAAA,EACA,cAAAC;AAAA,EACA,iBAAAC;AACF,MAGwB;AACtB,QAAM,CAACC,GAAYC,CAAa,IAAIC,EAAwB;AAAA,IAC1D,OAAO;AAAA,IACP,WAAW;AAAA,EAAA,CACZ,GAEKC,IAAmBN,EAAQ,IAAI,CAACO,GAAQC,OAAW;AAAA,IACvD,GAAGD;AAAA,IACH,KACE,OAAOA,EAAO,SAAU,WAAW,OAAOA,EAAO,KAAK,IAAI,OAAOC,CAAK;AAAA,IACxE,QAAQD,EAAO;AAAA,EAAA,EACf;AA8EK,SAAA;AAAA,IACL,YAAAJ;AAAA,IACA,QAhCa,CAACI,MAAoC;AAQlD,YAAME,IAPgBT,EAAQ;AAAA,QAC5B,CAACU,MACC,OAAOA,EAAE,SAAU,YACnBA,EAAE,MAAM,SAAS,KACjB,OAAOA,EAAE,KAAK,MAAMH,EAAO;AAAA,MAC/B,GAEmC;AAE/B,MAAAE,MAAgB,UAAaA,MAAgB,cACjCL,EAAA;AAAA,QACZ,OAAOK;AAAA,QACP,WAAWN,EAAW,cAAc,QAAQ,SAAS;AAAA,MAAA,CACtD,GACDF;AAAA,QACEQ;AAAA,QACAN,EAAW,cAAc,QAAQ,SAAS;AAAA,MAC5C;AAAA,IAEJ;AAAA,IAaE,kBAjEuB,CACvBQ,GACAC,GACAZ,MACoB;AACpB,YAAMO,IAASP,EAAQ;AAAA,QACrB,CAACU,MACC,OAAOA,EAAE,SAAU,YAAY,OAAOA,EAAE,KAAK,MAAM,OAAOC,CAAS;AAAA,MACvE;AAEA,UAAIJ,MAAW;AACN,eAAA;AAGL,UAAAA,EAAO,SAAS;AACX,eAAAA,EAAO,KAAKK,CAAG;AAItB,UAAA,OAAOL,EAAO,SAAU,YACxBA,EAAO,MAAM,SAAS,KACtBA,EAAO,SAASK,GAChB;AACM,cAAAC,IAAQD,EAAIL,EAAO,KAAgB;AAClC,eAAA,OAAOM,KAAU,YAAY,OAAOA,KAAU,WACjD,OAAOA,CAAK,IACZ;AAAA,MAAA;AAGC,aAAA;AAAA,IACT;AAAA,IAoCE,qBAhF0B,CAACN,MACpB,OAAOA,EAAO,UAAW,YAAYA,EAAO,OAAO,SAAS,IAC/DA,EAAO,SACP,OAAOA,EAAO,OAAQ,YAAYA,EAAO,IAAI,SAAS,IACpDA,EAAO,MACP;AAAA,IA4EN,kBAzEuB,CAACO,MACjB,OAAOA,KAAW,YAAYA,EAAO,SAAS,IACjD,WAAWA,CAAM,KACjB;AAAA,IAuEJ,kBAAAR;AAAA,IACA,kBAfuB,CAAC,MAA2C;AACnE,YAAMS,IAAU,EAAE;AAElB,MAAIA,EAAQ,YAAYA,EAAQ,gBAAgBA,EAAQ,gBACpCb,IAAA;AAAA,IAEtB;AAAA,EAUA;AACF;"}