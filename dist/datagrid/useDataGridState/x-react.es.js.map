{"version":3,"file":"x-react.es.js","sources":["../../../src/datagrid/useDataGridState.ts"],"sourcesContent":["import type { ColumnDefinition, ExtendedColumn } from \"@/types/datagrid\";\nimport type { Key } from \"react\";\nimport { useState } from \"react\";\n\n// types.ts\ntype RowIdentifier = string | number;\ntype DataGridRow = { id: RowIdentifier };\ntype SortOrder = \"asc\" | \"desc\";\n\ninterface SortConfig<T> {\n  field: keyof T | null;\n  direction: SortOrder;\n}\n\ninterface DataGridState<T> {\n  sortConfig: SortConfig<T>;\n  processedColumns: ExtendedColumn<T>[];\n  onSort: (column: ExtendedColumn<T>) => void;\n  extractCellValue: (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ) => React.ReactNode;\n  extractColumnHeader: (column: ExtendedColumn<T>) => string;\n  formatSortHeader: (header: React.ReactNode) => string;\n  handleGridScroll: (e: React.UIEvent<HTMLDivElement>) => void;\n}\n\ninterface DataGridProps<T> {\n  rows: T[];\n  columns: ColumnDefinition<T>[];\n  onRowSelectionChange?: (selectedRows: T[]) => void;\n  onSortChange?: (field: keyof T, order: SortOrder) => void;\n  onGridScrollEnd?: () => void;\n}\n\nexport const useDataGridState = <T extends DataGridRow>({\n  columns,\n  onSortChange,\n  onGridScrollEnd,\n}: Pick<\n  DataGridProps<T>,\n  \"columns\" | \"onSortChange\" | \"onGridScrollEnd\"\n>): DataGridState<T> => {\n  const [sortConfig, setSortConfig] = useState<SortConfig<T>>({\n    field: null,\n    direction: \"asc\",\n  });\n\n  const processedColumns = columns.map((column, index) => ({\n    ...column,\n    key:\n      typeof column.field === \"string\" ? String(column.field) : String(index),\n    header: column.header,\n  }));\n\n  const extractColumnHeader = (column: ExtendedColumn<T>): string => {\n    return typeof column.header === \"string\" && column.header.length > 0\n      ? column.header\n      : typeof column.key === \"string\" && column.key.length > 0\n        ? column.key\n        : \"Column\";\n  };\n\n  const formatSortHeader = (header: React.ReactNode): string => {\n    return typeof header === \"string\" && header.length > 0\n      ? `Sort by ${header}`\n      : \"Sort column\";\n  };\n\n  const extractCellValue = (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ): React.ReactNode => {\n    const column = columns.find(\n      (c) =>\n        typeof c.field === \"string\" && String(c.field) === String(columnKey),\n    );\n\n    if (column === undefined) {\n      return null;\n    }\n\n    if (column.cell !== undefined) {\n      return column.cell(row);\n    }\n\n    if (\n      typeof column.field === \"string\" &&\n      column.field.length > 0 &&\n      column.field in row\n    ) {\n      const value = row[column.field as keyof T];\n      return typeof value === \"string\" || typeof value === \"number\"\n        ? String(value)\n        : null;\n    }\n\n    return null;\n  };\n\n  const onSort = (column: ExtendedColumn<T>): void => {\n    const matchedColumn = columns.find(\n      (c) =>\n        typeof c.field === \"string\" &&\n        c.field.length > 0 &&\n        String(c.field) === column.key,\n    );\n\n    const columnField = matchedColumn?.field;\n\n    if (columnField !== undefined && columnField !== \"actions\") {\n      setSortConfig({\n        field: columnField,\n        direction: sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      });\n      onSortChange?.(\n        columnField,\n        sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      );\n    }\n  };\n\n  const handleGridScroll = (e: React.UIEvent<HTMLDivElement>): void => {\n    const element = e.currentTarget;\n\n    if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\n      onGridScrollEnd?.();\n    }\n  };\n\n  return {\n    sortConfig,\n    onSort,\n    extractCellValue,\n    extractColumnHeader,\n    formatSortHeader,\n    processedColumns,\n    handleGridScroll,\n  };\n};\n"],"names":["columns"],"mappings":";AAoCO,MAAM,mBAAmB,CAAwB;AAAA,EACtD;AAAA,EACA;AAAA,EACA;AACF,MAGwB;AACtB,QAAM,CAAC,YAAY,aAAa,IAAI,SAAwB;AAAA,IAC1D,OAAO;AAAA,IACP,WAAW;AAAA,EAAA,CACZ;AAED,QAAM,mBAAmB,QAAQ,IAAI,CAAC,QAAQ,WAAW;AAAA,IACvD,GAAG;AAAA,IACH,KACE,OAAO,OAAO,UAAU,WAAW,OAAO,OAAO,KAAK,IAAI,OAAO,KAAK;AAAA,IACxE,QAAQ,OAAO;AAAA,EAAA,EACf;AAEI,QAAA,sBAAsB,CAAC,WAAsC;AACjE,WAAO,OAAO,OAAO,WAAW,YAAY,OAAO,OAAO,SAAS,IAC/D,OAAO,SACP,OAAO,OAAO,QAAQ,YAAY,OAAO,IAAI,SAAS,IACpD,OAAO,MACP;AAAA,EACR;AAEM,QAAA,mBAAmB,CAAC,WAAoC;AACrD,WAAA,OAAO,WAAW,YAAY,OAAO,SAAS,IACjD,WAAW,MAAM,KACjB;AAAA,EACN;AAEA,QAAM,mBAAmB,CACvB,WACA,KACAA,aACoB;AACpB,UAAM,SAASA,SAAQ;AAAA,MACrB,CAAC,MACC,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,KAAK,MAAM,OAAO,SAAS;AAAA,IACvE;AAEA,QAAI,WAAW,QAAW;AACjB,aAAA;AAAA,IAAA;AAGL,QAAA,OAAO,SAAS,QAAW;AACtB,aAAA,OAAO,KAAK,GAAG;AAAA,IAAA;AAItB,QAAA,OAAO,OAAO,UAAU,YACxB,OAAO,MAAM,SAAS,KACtB,OAAO,SAAS,KAChB;AACM,YAAA,QAAQ,IAAI,OAAO,KAAgB;AAClC,aAAA,OAAO,UAAU,YAAY,OAAO,UAAU,WACjD,OAAO,KAAK,IACZ;AAAA,IAAA;AAGC,WAAA;AAAA,EACT;AAEM,QAAA,SAAS,CAAC,WAAoC;AAClD,UAAM,gBAAgB,QAAQ;AAAA,MAC5B,CAAC,MACC,OAAO,EAAE,UAAU,YACnB,EAAE,MAAM,SAAS,KACjB,OAAO,EAAE,KAAK,MAAM,OAAO;AAAA,IAC/B;AAEA,UAAM,cAAc,+CAAe;AAE/B,QAAA,gBAAgB,UAAa,gBAAgB,WAAW;AAC5C,oBAAA;AAAA,QACZ,OAAO;AAAA,QACP,WAAW,WAAW,cAAc,QAAQ,SAAS;AAAA,MAAA,CACtD;AACD;AAAA,QACE;AAAA,QACA,WAAW,cAAc,QAAQ,SAAS;AAAA;AAAA,IAC5C;AAAA,EAEJ;AAEM,QAAA,mBAAmB,CAAC,MAA2C;AACnE,UAAM,UAAU,EAAE;AAElB,QAAI,QAAQ,YAAY,QAAQ,gBAAgB,QAAQ,cAAc;AAClD;AAAA,IAAA;AAAA,EAEtB;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;"}