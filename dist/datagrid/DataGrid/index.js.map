{"version":3,"file":"index.js","sources":["../../../src/datagrid/DataGrid.tsx"],"sourcesContent":["import { useDataGridState } from \"@/datagrid/useDataGridState\";\nimport { cn } from \"@/utils\";\nimport {\n  Table as DataTable,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/react\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport type { JSX } from \"react\";\nimport { DataGridSkeleton } from \"./DataGridSkeleton\";\nimport type { DataGridProps } from \"@/types/datagrid\";\nimport { GRID_VARIANTS } from \"@/data/default\";\n\nexport function DataGrid<T extends { id: string | number }>({\n  rows,\n  columns,\n  onSortChange,\n  variant = \"unstyled\",\n  isLoading = false,\n  onGridScrollEnd,\n  childrenProps,\n  ...props\n}: DataGridProps<T>): JSX.Element {\n  const {\n    sortConfig,\n    processedColumns,\n    formatSortHeader,\n    extractCellValue,\n    extractColumnHeader,\n    onSort,\n    handleGridScroll,\n  } = useDataGridState({\n    onSortChange,\n    columns,\n    onGridScrollEnd,\n  });\n\n  const variantClasses = GRID_VARIANTS[variant];\n\n  if (isLoading) {\n    return (\n      <DataGridSkeleton\n        columns={columns.length}\n        checkboxSelection={props.showSelectionCheckboxes}\n        variant={variant}\n        rows={rows.length}\n      />\n    );\n  }\n\n  return (\n    <DataTable\n      aria-label=\"data-grid\"\n      {...props}\n      classNames={{\n        ...props.classNames,\n        th: cn(variantClasses.th, props.classNames?.th),\n        tr: cn(variantClasses.tr, props.classNames?.tr),\n      }}\n      onScroll={handleGridScroll}\n    >\n      <TableHeader\n        columns={processedColumns}\n        {...childrenProps?.tableHeaderProps}\n      >\n        {(column) => (\n          <TableColumn\n            key={column.key}\n            aria-label={extractColumnHeader(column)}\n            {...childrenProps?.tableColumnProps}\n          >\n            <div className=\"flex items-center gap-2\">\n              {column.header}\n              {column.sortable !== false && (\n                <div\n                  className={cn(\"relative size-4 cursor-pointer\")}\n                  onClick={() => onSort(column)}\n                  role=\"button\"\n                  aria-label={formatSortHeader(column.header)}\n                >\n                  <IconChevronUp\n                    size={16}\n                    className={cn(\n                      \"absolute -top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"asc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                  <IconChevronDown\n                    size={16}\n                    className={cn(\n                      \"absolute top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"desc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody items={rows} {...childrenProps?.tableBodyProps}>\n        {(row: T) => {\n          return (\n            <TableRow key={row.id} {...childrenProps?.tableRowProps}>\n              {(columnKey) => (\n                <TableCell {...childrenProps?.tableCellProps}>\n                  {extractCellValue(columnKey, row, columns)}\n                </TableCell>\n              )}\n            </TableRow>\n          );\n        }}\n      </TableBody>\n    </DataTable>\n  );\n}\n"],"names":["DataGrid","rows","columns","onSortChange","variant","isLoading","onGridScrollEnd","childrenProps","props","sortConfig","processedColumns","formatSortHeader","extractCellValue","extractColumnHeader","onSort","handleGridScroll","useDataGridState","variantClasses","GRID_VARIANTS","jsx","DataGridSkeleton","jsxs","DataTable","cn","TableHeader","column","TableColumn","IconChevronUp","IconChevronDown","TableBody","row","TableRow","columnKey","TableCell"],"mappings":";;;;;;;AAgBO,SAASA,EAA4C;AAAA,EAC1D,MAAAC;AAAA,EACA,SAAAC;AAAA,EACA,cAAAC;AAAA,EACA,SAAAC,IAAU;AAAA,EACV,WAAAC,IAAY;AAAA,EACZ,iBAAAC;AAAA,EACA,eAAAC;AAAA,EACA,GAAGC;AACL,GAAkC;AAC1B,QAAA;AAAA,IACJ,YAAAC;AAAA,IACA,kBAAAC;AAAA,IACA,kBAAAC;AAAA,IACA,kBAAAC;AAAA,IACA,qBAAAC;AAAA,IACA,QAAAC;AAAA,IACA,kBAAAC;AAAA,MACEC,EAAiB;AAAA,IACnB,cAAAb;AAAA,IACA,SAAAD;AAAA,IACA,iBAAAI;AAAA,EAAA,CACD,GAEKW,IAAiBC,EAAcd,CAAO;AAE5C,SAAIC,IAEA,gBAAAc;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,SAASlB,EAAQ;AAAA,MACjB,mBAAmBM,EAAM;AAAA,MACzB,SAAAJ;AAAA,MACA,MAAMH,EAAK;AAAA,IAAA;AAAA,EACb,IAKF,gBAAAoB;AAAA,IAACC;AAAAA,IAAA;AAAA,MACC,cAAW;AAAA,MACV,GAAGd;AAAA,MACJ,YAAY;AAAA,QACV,GAAGA,EAAM;AAAA,QACT,IAAIe,EAAGN,EAAe,IAAIT,EAAM,YAAY,EAAE;AAAA,QAC9C,IAAIe,EAAGN,EAAe,IAAIT,EAAM,YAAY,EAAE;AAAA,MAChD;AAAA,MACA,UAAUO;AAAA,MAEV,UAAA;AAAA,QAAA,gBAAAI;AAAA,UAACK;AAAA,UAAA;AAAA,YACC,SAASd;AAAA,YACR,GAAGH,GAAe;AAAA,YAElB,WAACkB,MACA,gBAAAN;AAAA,cAACO;AAAA,cAAA;AAAA,gBAEC,cAAYb,EAAoBY,CAAM;AAAA,gBACrC,GAAGlB,GAAe;AAAA,gBAEnB,UAAA,gBAAAc,EAAC,OAAI,EAAA,WAAU,2BACZ,UAAA;AAAA,kBAAOI,EAAA;AAAA,kBACPA,EAAO,aAAa,MACnB,gBAAAJ;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,WAAWE,EAAG,gCAAgC;AAAA,sBAC9C,SAAS,MAAMT,EAAOW,CAAM;AAAA,sBAC5B,MAAK;AAAA,sBACL,cAAYd,EAAiBc,EAAO,MAAM;AAAA,sBAE1C,UAAA;AAAA,wBAAA,gBAAAN;AAAA,0BAACQ;AAAA,0BAAA;AAAA,4BACC,MAAM;AAAA,4BACN,WAAWJ;AAAA,8BACT;AAAA,8BACAd,EAAW,UAAUgB,EAAO,OAC1BhB,EAAW,cAAc,QACvB,gBACA;AAAA,4BAAA;AAAA,0BACN;AAAA,wBACF;AAAA,wBACA,gBAAAU;AAAA,0BAACS;AAAA,0BAAA;AAAA,4BACC,MAAM;AAAA,4BACN,WAAWL;AAAA,8BACT;AAAA,8BACAd,EAAW,UAAUgB,EAAO,OAC1BhB,EAAW,cAAc,SACvB,gBACA;AAAA,4BAAA;AAAA,0BACN;AAAA,wBAAA;AAAA,sBACF;AAAA,oBAAA;AAAA,kBAAA;AAAA,gBACF,EAEJ,CAAA;AAAA,cAAA;AAAA,cAnCKgB,EAAO;AAAA,YAAA;AAAA,UAoCd;AAAA,QAEJ;AAAA,QACA,gBAAAN,EAACU,KAAU,OAAO5B,GAAO,GAAGM,GAAe,gBACxC,WAACuB,wBAEGC,GAAuB,EAAA,GAAGxB,GAAe,eACvC,UAAA,CAACyB,MACC,gBAAAb,EAAAc,GAAA,EAAW,GAAG1B,GAAe,gBAC3B,YAAiByB,GAAWF,GAAK5B,CAAO,GAC3C,EAAA,GAJW4B,EAAI,EAMnB,EAGN,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACF;AAEJ;"}