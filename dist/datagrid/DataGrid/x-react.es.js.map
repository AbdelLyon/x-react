{"version":3,"file":"x-react.es.js","sources":["../../../src/datagrid/DataGrid.tsx"],"sourcesContent":["import { useDataGridState } from \"@/datagrid/useDataGridState\";\nimport { cn } from \"@/utils\";\nimport {\n  Table as DataTable,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/react\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport type { JSX } from \"react\";\nimport { DataGridSkeleton } from \"./DataGridSkeleton\";\nimport type { DataGridProps } from \"@/types/datagrid\";\nimport { GRID_VARIANTS } from \"@/data/default\";\n\nexport function DataGrid<T extends { id: string | number }>({\n  rows,\n  columns,\n  onSortChange,\n  variant = \"unstyled\",\n  isLoading = false,\n  onGridScrollEnd,\n  childrenProps,\n  ...props\n}: DataGridProps<T>): JSX.Element {\n  const {\n    sortConfig,\n    processedColumns,\n    formatSortHeader,\n    extractCellValue,\n    extractColumnHeader,\n    onSort,\n    handleGridScroll,\n  } = useDataGridState({\n    onSortChange,\n    columns,\n    onGridScrollEnd,\n  });\n\n  const variantClasses = GRID_VARIANTS[variant];\n\n  if (isLoading) {\n    return (\n      <DataGridSkeleton\n        columns={columns.length}\n        checkboxSelection={props.showSelectionCheckboxes}\n        variant={variant}\n        rows={rows.length}\n      />\n    );\n  }\n\n  return (\n    <DataTable\n      aria-label=\"data-grid\"\n      {...props}\n      classNames={{\n        ...props.classNames,\n        th: cn(variantClasses.th, props.classNames?.th),\n        tr: cn(variantClasses.tr, props.classNames?.tr),\n      }}\n      onScroll={handleGridScroll}\n    >\n      <TableHeader\n        columns={processedColumns}\n        {...childrenProps?.tableHeaderProps}\n      >\n        {(column) => (\n          <TableColumn\n            key={column.key}\n            aria-label={extractColumnHeader(column)}\n            {...childrenProps?.tableColumnProps}\n          >\n            <div className=\"flex items-center gap-2\">\n              {column.header}\n              {column.sortable !== false && (\n                <div\n                  className={cn(\"relative size-4 cursor-pointer\")}\n                  onClick={() => onSort(column)}\n                  role=\"button\"\n                  aria-label={formatSortHeader(column.header)}\n                >\n                  <IconChevronUp\n                    size={16}\n                    className={cn(\n                      \"absolute -top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"asc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                  <IconChevronDown\n                    size={16}\n                    className={cn(\n                      \"absolute top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"desc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody items={rows} {...childrenProps?.tableBodyProps}>\n        {(row: T) => {\n          return (\n            <TableRow key={row.id} {...childrenProps?.tableRowProps}>\n              {(columnKey) => (\n                <TableCell {...childrenProps?.tableCellProps}>\n                  {extractCellValue(columnKey, row, columns)}\n                </TableCell>\n              )}\n            </TableRow>\n          );\n        }}\n      </TableBody>\n    </DataTable>\n  );\n}\n"],"names":["jsx","jsxs","DataTable"],"mappings":";;;;;;;AAgBO,SAAS,SAA4C;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAkC;;AAC1B,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,iBAAiB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAEK,QAAA,iBAAiB,cAAc,OAAO;AAE5C,MAAI,WAAW;AAEX,WAAAA,kCAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,SAAS,QAAQ;AAAA,QACjB,mBAAmB,MAAM;AAAA,QACzB;AAAA,QACA,MAAM,KAAK;AAAA,MAAA;AAAA,IACb;AAAA,EAAA;AAKF,SAAAC,kCAAA;AAAA,IAACC;AAAAA,IAAA;AAAA,MACC,cAAW;AAAA,MACV,GAAG;AAAA,MACJ,YAAY;AAAA,QACV,GAAG,MAAM;AAAA,QACT,IAAI,GAAG,eAAe,KAAI,WAAM,eAAN,mBAAkB,EAAE;AAAA,QAC9C,IAAI,GAAG,eAAe,KAAI,WAAM,eAAN,mBAAkB,EAAE;AAAA,MAChD;AAAA,MACA,UAAU;AAAA,MAEV,UAAA;AAAA,QAAAF,kCAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,SAAS;AAAA,YACR,GAAG,+CAAe;AAAA,YAElB,WAAC,WACAA,kCAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBAEC,cAAY,oBAAoB,MAAM;AAAA,gBACrC,GAAG,+CAAe;AAAA,gBAEnB,UAAAC,kCAAA,KAAC,OAAI,EAAA,WAAU,2BACZ,UAAA;AAAA,kBAAO,OAAA;AAAA,kBACP,OAAO,aAAa,SACnBA,kCAAA;AAAA,oBAAC;AAAA,oBAAA;AAAA,sBACC,WAAW,GAAG,gCAAgC;AAAA,sBAC9C,SAAS,MAAM,OAAO,MAAM;AAAA,sBAC5B,MAAK;AAAA,sBACL,cAAY,iBAAiB,OAAO,MAAM;AAAA,sBAE1C,UAAA;AAAA,wBAAAD,kCAAA;AAAA,0BAAC;AAAA,0BAAA;AAAA,4BACC,MAAM;AAAA,4BACN,WAAW;AAAA,8BACT;AAAA,8BACA,WAAW,UAAU,OAAO,OAC1B,WAAW,cAAc,QACvB,gBACA;AAAA,4BAAA;AAAA,0BACN;AAAA,wBACF;AAAA,wBACAA,kCAAA;AAAA,0BAAC;AAAA,0BAAA;AAAA,4BACC,MAAM;AAAA,4BACN,WAAW;AAAA,8BACT;AAAA,8BACA,WAAW,UAAU,OAAO,OAC1B,WAAW,cAAc,SACvB,gBACA;AAAA,4BAAA;AAAA,0BACN;AAAA,wBAAA;AAAA,sBACF;AAAA,oBAAA;AAAA,kBAAA;AAAA,gBACF,EAEJ,CAAA;AAAA,cAAA;AAAA,cAnCK,OAAO;AAAA,YAAA;AAAA,UAoCd;AAAA,QAEJ;AAAA,QACAA,sCAAC,aAAU,OAAO,MAAO,GAAG,+CAAe,gBACxC,WAAC,QAAW;AACX,uDACG,UAAuB,EAAA,GAAG,+CAAe,eACvC,UAAA,CAAC,cACCA,kCAAA,IAAA,WAAA,EAAW,GAAG,+CAAe,gBAC3B,2BAAiB,WAAW,KAAK,OAAO,GAC3C,EAAA,GAJW,IAAI,EAMnB;AAAA,QAAA,EAGN,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACF;AAEJ;"}