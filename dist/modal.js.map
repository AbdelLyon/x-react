{"version":3,"sources":["../src/utils/index.ts","../src/button/Button.tsx","../src/button/Buttons.tsx","../src/modal/Modal.tsx"],"names":["ButtonRoot","forwardRef","jsx","jsxs","Fragment","ModalRoot"],"mappings":"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","file":"modal.js","sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport const cn = (...inputs: ClassValue[]): string => {\n  return twMerge(clsx(inputs));\n};\n\nexport const capitalizeFirstLetter = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const concatenateWithSpace = (\n  ...strings: (string | undefined)[]\n): string => strings.filter(Boolean).join(\" \");\n\nexport const startsWith = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\n\nexport const endsWith = (str: string, suffix: string): boolean =>\n  str.endsWith(suffix);\n\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\nexport const trim = (str: string): string => str.trim();\n\nexport const reverse = (str: string): string =>\n  str.split(\"\").reverse().join(\"\");\n\nexport const limitValue = (\n  value: number,\n  min: number | undefined,\n  max: number | undefined,\n): number => {\n  if (min === undefined && max === undefined) {\n    return value;\n  }\n\n  if (min !== undefined && max === undefined) {\n    return Math.max(value, min);\n  }\n\n  if (min === undefined && max !== undefined) {\n    return Math.min(value, max);\n  }\n\n  if (min !== undefined && max !== undefined) {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  return value;\n};\n\ntype DebouncedFunction<Args extends unknown[]> = {\n  (...args: Args): void;\n  cancel: () => void;\n};\n\n//debounce function\nexport function debounce<\n  Callback extends (...args: never[]) => unknown,\n  Args extends Parameters<Callback>,\n>(callback: Callback, delay = 0): DebouncedFunction<Args> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let latestArgs: Args | undefined;\n\n  function debouncedFn(this: unknown, ...args: Args): void {\n    latestArgs = args;\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      if (latestArgs) {\n        callback.apply(this, latestArgs);\n      }\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }, delay);\n  }\n\n  debouncedFn.cancel = function cancel(): void {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }\n  };\n\n  return debouncedFn;\n}\n","import type { AnchorHTMLAttributes, ComponentType, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { ButtonProps as ButtonRootProps } from \"@nextui-org/react\";\nimport { Button as ButtonRoot } from \"@nextui-org/react\";\nimport { cn } from \"@/utils\";\n\nexport interface ButtonProps extends ButtonRootProps {\n  LinkComponent?: ComponentType<AnchorHTMLAttributes<HTMLAnchorElement>>;\n  classNames?: {\n    base?: string;\n    beforeContent?: string;\n    afterContent?: string;\n    content?: string;\n  };\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      fullWidth = false,\n      isLoading = false,\n      isDisabled = false,\n      startContent,\n      endContent,\n      className = \"\",\n      LinkComponent,\n      variant = \"solid\",\n      classNames = {\n        base: \"\",\n        beforeContent: \"\",\n        afterContent: \"\",\n        content: \"\",\n      },\n      href,\n      children,\n      target,\n      rel,\n      ...props\n    },\n    ref,\n  ) => {\n    const baseStyles = cn(\n      \"transition-none font-normal border-1 rounded-md\",\n      fullWidth && \"w-full\",\n      isLoading && \"opacity-50 cursor-not-allowed\",\n      classNames.base,\n      className,\n    );\n\n    const Content = (): ReactNode => (\n      <>\n        {startContent !== undefined && (\n          <span className={cn(\"mr-2\", classNames.beforeContent)}>\n            {startContent}\n          </span>\n        )}\n        <span className={classNames.content}>{children}</span>\n        {endContent !== undefined && (\n          <span className={cn(\"ml-2\", classNames.afterContent)}>\n            {endContent}\n          </span>\n        )}\n      </>\n    );\n\n    const hasValidLink =\n      href !== undefined &&\n      href.length > 0 &&\n      LinkComponent !== undefined &&\n      LinkComponent !== undefined;\n\n    if (hasValidLink) {\n      return (\n        <ButtonRoot\n          ref={ref}\n          {...props}\n          as={LinkComponent}\n          variant={variant}\n          className={baseStyles}\n          href={href}\n          rel={target === \"_blank\" ? \"noopener noreferrer\" : rel}\n          target={target}\n        >\n          <Content />\n        </ButtonRoot>\n      );\n    }\n\n    return (\n      <ButtonRoot\n        ref={ref}\n        {...props}\n        variant={variant}\n        className={baseStyles}\n        isDisabled={isDisabled}\n      >\n        <Content />\n      </ButtonRoot>\n    );\n  },\n);\n\nButton.displayName = \"Button\";\n","import { forwardRef } from \"react\";\nimport type { ButtonGroupProps, ButtonProps } from \"@nextui-org/react\";\nimport { ButtonGroup } from \"@nextui-org/react\";\nimport { Button } from \"./Button\";\n\nexport interface ButtonsProps extends ButtonGroupProps {\n  buttons: Array<{\n    key: string | number;\n    label: React.ReactNode;\n    buttonProps?: ButtonProps;\n  }>;\n}\n\nexport const Buttons = forwardRef<HTMLDivElement, ButtonsProps>(\n  ({ buttons, ...props }, ref) => {\n    return (\n      <ButtonGroup ref={ref} {...props}>\n        {buttons.map(({ key, label, buttonProps }) => (\n          <Button key={key} {...buttonProps}>\n            {label}\n          </Button>\n        ))}\n      </ButtonGroup>\n    );\n  },\n);\n\nButtons.displayName = \"Buttons\";\n","import type { JSX } from \"react\";\nimport { forwardRef, useState, useCallback } from \"react\";\nimport type { ModalProps as ModalPropsRoot } from \"@nextui-org/react\";\nimport {\n  Modal as ModalRoot,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n} from \"@nextui-org/react\";\n\nimport { cn } from \"@/utils\";\nimport { Button, type ButtonProps } from \"@/button\";\n\ntype Backdrop = ModalPropsRoot[\"backdrop\"];\n\ninterface ModalClassNames {\n  wrapper?: string;\n  base?: string;\n  backdrop?: string;\n  header?: string;\n  body?: string;\n  footer?: string;\n  closeButton?: string;\n}\n\ninterface ModalBaseProps {\n  trigger: React.ReactNode;\n  title?: React.ReactNode;\n  footer?: React.ReactNode;\n  children: React.ReactNode;\n  classNames?: ModalClassNames;\n  onOpenChange?: (isOpen: boolean) => void;\n  defaultBackdrop?: Backdrop;\n}\n\ninterface ModalButtonProps {\n  onAction?: () => void | Promise<void>;\n  buttonCloseLabel?: string;\n  buttonActionLabel?: string;\n  buttonCloseProps?: ButtonProps;\n  buttonActionProps?: ButtonProps;\n}\n\nexport type ModalProps = Omit<Partial<ModalPropsRoot>, keyof ModalBaseProps> &\n  ModalBaseProps &\n  ModalButtonProps;\n\nconst defaultClassNames = {\n  closeButton: \"absolute right-4 top-4\",\n  base: \"bg-background border border-default shadow-lg dark:shadow-none rounded-lg\",\n  header: \"flex flex-col gap-1\",\n  footer: \"flex justify-end gap-2\",\n} as const;\n\nconst defaultButtonProps = {\n  color: \"primary\" as const,\n  radius: \"sm\" as const,\n} as const;\n\nconst isValidButtonLabel = (label: unknown): label is string =>\n  typeof label === \"string\" && label.length > 0;\n\ninterface ModalButtonsProps extends ModalButtonProps {\n  onClose: () => void;\n}\n\nconst ModalButtons = ({\n  buttonCloseLabel = \"Close\",\n  buttonActionLabel,\n  buttonCloseProps,\n  buttonActionProps,\n  onAction,\n  onClose,\n}: ModalButtonsProps): JSX.Element => {\n  const handleAction = async (): Promise<void> => {\n    try {\n      await onAction?.();\n      onClose();\n    } catch (error) {\n      console.error(\"Modal action failed:\", error);\n    }\n  };\n\n  const hasValidCloseLabel = isValidButtonLabel(buttonCloseLabel);\n  const hasValidActionButton =\n    isValidButtonLabel(buttonActionLabel) && onAction !== undefined;\n\n  return (\n    <>\n      {hasValidCloseLabel && (\n        <Button\n          className={cn(\"border-primary/50\", buttonCloseProps?.className)}\n          variant={buttonCloseProps?.variant ?? \"bordered\"}\n          onPress={onClose}\n          {...defaultButtonProps}\n          {...buttonCloseProps}\n        >\n          {buttonCloseLabel}\n        </Button>\n      )}\n\n      {hasValidActionButton && (\n        <Button\n          onPress={handleAction}\n          {...defaultButtonProps}\n          {...buttonActionProps}\n        >\n          {buttonActionLabel}\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport const Modal = forwardRef<HTMLDivElement, ModalProps>(\n  (\n    {\n      trigger,\n      title,\n      footer,\n      children,\n      onAction,\n      buttonCloseLabel,\n      buttonActionLabel,\n      buttonCloseProps,\n      buttonActionProps,\n      defaultBackdrop = \"opaque\",\n      onOpenChange,\n      classNames,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen, onOpen, onClose } = useDisclosure({\n      onChange: onOpenChange,\n    });\n    const [backdrop, setBackdrop] = useState<Backdrop>(defaultBackdrop);\n\n    const handleOpen = useCallback(\n      (backdropType: Backdrop = defaultBackdrop): void => {\n        setBackdrop(backdropType);\n        onOpen();\n      },\n      [defaultBackdrop, onOpen],\n    );\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>): void => {\n        if (event.key === \"Enter\" || event.key === \" \") {\n          event.preventDefault();\n          handleOpen();\n        }\n      },\n      [handleOpen],\n    );\n\n    const modalClassNames = {\n      closeButton: cn(defaultClassNames.closeButton, classNames?.closeButton),\n      base: cn(defaultClassNames.base, classNames?.base),\n      header: cn(defaultClassNames.header, classNames?.header),\n      body: cn(classNames?.body),\n      footer: cn(defaultClassNames.footer, classNames?.footer),\n      backdrop: cn(classNames?.backdrop),\n    };\n\n    return (\n      <>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => handleOpen()}\n          onKeyDown={handleKeyDown}\n          className=\"inline-block\"\n        >\n          {trigger}\n        </div>\n\n        <ModalRoot\n          ref={ref}\n          backdrop={backdrop}\n          classNames={modalClassNames}\n          isOpen={isOpen}\n          onClose={onClose}\n          {...props}\n        >\n          <ModalContent>\n            {() => (\n              <>\n                {title !== undefined && (\n                  <ModalHeader className={modalClassNames.header}>\n                    {title}\n                  </ModalHeader>\n                )}\n                <ModalBody className={modalClassNames.body}>\n                  {children}\n                </ModalBody>\n                <ModalFooter className={modalClassNames.footer}>\n                  {footer !== undefined ? (\n                    footer\n                  ) : (\n                    <ModalButtons\n                      buttonCloseLabel={buttonCloseLabel}\n                      buttonActionLabel={buttonActionLabel}\n                      buttonCloseProps={buttonCloseProps}\n                      buttonActionProps={buttonActionProps}\n                      onAction={onAction}\n                      onClose={onClose}\n                    />\n                  )}\n                </ModalFooter>\n              </>\n            )}\n          </ModalContent>\n        </ModalRoot>\n      </>\n    );\n  },\n);\n\nModal.displayName = \"Modal\";\n"]}