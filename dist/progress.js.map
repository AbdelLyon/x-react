{"version":3,"sources":["../src/progress/Progress.tsx","../src/progress/CircularProgress.tsx"],"names":["ProgressRoor","defaultProps","forwardRef","jsx","CircularProgressRoot"],"mappings":"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","file":"progress.js","sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { ProgressProps as ProgressRootProps } from \"@nextui-org/react\";\nimport { Progress as ProgressRoor } from \"@nextui-org/react\";\n\ntype AdditionalProgressProps = {\n  label?: ReactNode;\n  labelPosition?: \"top\" | \"bottom\" | \"none\";\n  containerClassName?: string;\n  labelClassName?: string;\n};\n\ntype ProgressProps = {\n  classNames?: ProgressRootProps[\"classNames\"];\n} & Omit<ProgressRootProps, \"classNames\"> &\n  AdditionalProgressProps;\n\nconst defaultProps = {\n  size: \"md\",\n  color: \"primary\",\n  radius: \"full\",\n  minValue: 0,\n  maxValue: 100,\n  formatOptions: { style: \"percent\" } as const,\n  showValueLabel: true,\n} as const;\n\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>(\n  (\n    {\n      label,\n      labelPosition = \"top\",\n      containerClassName,\n      labelClassName,\n      value = 0,\n      maxValue = 100,\n      formatOptions = defaultProps.formatOptions,\n      valueLabel,\n      showValueLabel = defaultProps.showValueLabel,\n      classNames,\n      ...nextUIProps\n    },\n    ref,\n  ) => {\n    const getValueLabel = (): string => {\n      const formattedValue = new Intl.NumberFormat(\n        undefined,\n        formatOptions,\n      ).format(value / maxValue);\n\n      if (typeof valueLabel === \"string\" && valueLabel.trim() !== \"\") {\n        return valueLabel;\n      }\n      return formattedValue;\n    };\n\n    const labelComponent =\n      labelPosition === \"none\" ? undefined : (\n        <div\n          className={`\n      flex items-center justify-between\n      text-small font-medium text-default-500\n      ${labelClassName ?? \"\"}\n      ${labelPosition === \"top\" ? \"order-first\" : \"order-last\"}\n    `}\n        >\n          {label !== undefined && <span>{label}</span>}\n          {showValueLabel && <span>{getValueLabel()}</span>}\n        </div>\n      );\n\n    const progressProps = {\n      value,\n      maxValue,\n      formatOptions,\n      showValueLabel,\n      ...nextUIProps,\n      classNames: {\n        ...classNames,\n        base: `w-full ${typeof classNames?.base === \"string\" && classNames.base}`,\n      },\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={`flex w-full max-w-md flex-col gap-2 ${containerClassName}`}\n      >\n        {labelComponent}\n        <ProgressRoor {...defaultProps} {...progressProps} />\n      </div>\n    );\n  },\n);\n\nProgress.displayName = \"Progress\";\n","import type { ReactNode } from \"react\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport type { CircularProgressProps as CircularProgressRootProps } from \"@nextui-org/react\";\nimport { CircularProgress as CircularProgressRoot } from \"@nextui-org/react\";\n\ntype AdditionalCircularProgressProps = {\n  autoIncrement?: boolean;\n  incrementInterval?: number;\n  incrementStep?: number;\n  onValueChange?: (value: number) => void;\n};\n\ntype CircularProgressProps = Omit<CircularProgressRootProps, \"classNames\"> &\n  AdditionalCircularProgressProps & {\n    classNames?: CircularProgressRootProps[\"classNames\"];\n  };\n\nconst defaultProps = {\n  color: \"primary\",\n  size: \"md\",\n  strokeWidth: 3,\n  showValueLabel: false,\n  formatOptions: { style: \"percent\" } as const,\n  value: 0,\n  minValue: 0,\n  maxValue: 100,\n} as const;\n\nconst defaultIncrementProps = {\n  autoIncrement: false,\n  incrementInterval: 500,\n  incrementStep: 10,\n} as const;\n\nexport const CircularProgress = forwardRef<\n  HTMLDivElement,\n  CircularProgressProps\n>(\n  (\n    {\n      // Auto-increment props\n      autoIncrement = defaultIncrementProps.autoIncrement,\n      incrementInterval = defaultIncrementProps.incrementInterval,\n      incrementStep = defaultIncrementProps.incrementStep,\n      onValueChange,\n\n      // NextUI props\n      value = defaultProps.value,\n      minValue = defaultProps.minValue,\n      maxValue = defaultProps.maxValue,\n      formatOptions = defaultProps.formatOptions,\n      valueLabel,\n      classNames,\n      showValueLabel,\n      color,\n      size,\n      ...nextUIProps\n    },\n    ref,\n  ) => {\n    const [currentValue, setCurrentValue] = useState(value);\n\n    useEffect(() => {\n      if (!autoIncrement) {\n        setCurrentValue(value);\n        return;\n      }\n\n      const interval = setInterval(() => {\n        setCurrentValue((v) => {\n          const newValue = v >= maxValue ? minValue : v + incrementStep;\n          onValueChange?.(newValue);\n          return newValue;\n        });\n      }, incrementInterval);\n\n      return () => clearInterval(interval);\n    }, [\n      autoIncrement,\n      value,\n      incrementInterval,\n      incrementStep,\n      maxValue,\n      minValue,\n      onValueChange,\n    ]);\n\n    const getValueLabel = (): ReactNode => {\n      if (valueLabel !== undefined) {\n        return valueLabel;\n      }\n\n      const percentage = (currentValue - minValue) / (maxValue - minValue);\n      return new Intl.NumberFormat(undefined, formatOptions).format(percentage);\n    };\n\n    const circularProgressProps = {\n      ...defaultProps,\n      ...nextUIProps,\n      ref,\n      value: currentValue,\n      minValue,\n      maxValue,\n      formatOptions,\n      valueLabel: getValueLabel(),\n      showValueLabel,\n      color,\n      size,\n      classNames,\n    };\n\n    return <CircularProgressRoot {...circularProgressProps} />;\n  },\n);\n\nCircularProgress.displayName = \"CircularProgress\";\n"]}