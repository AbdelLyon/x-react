{"version":3,"sources":["../src/utils/index.ts","../src/chart/Chart.tsx"],"names":["ChartJS","ChartRoot"],"mappings":"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","file":"chart.js","sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport const cn = (...inputs: ClassValue[]): string => {\n  return twMerge(clsx(inputs));\n};\n\nexport const capitalizeFirstLetter = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const concatenateWithSpace = (\n  ...strings: (string | undefined)[]\n): string => strings.filter(Boolean).join(\" \");\n\nexport const startsWith = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\n\nexport const endsWith = (str: string, suffix: string): boolean =>\n  str.endsWith(suffix);\n\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\nexport const trim = (str: string): string => str.trim();\n\nexport const reverse = (str: string): string =>\n  str.split(\"\").reverse().join(\"\");\n\nexport const limitValue = (\n  value: number,\n  min: number | undefined,\n  max: number | undefined,\n): number => {\n  if (min === undefined && max === undefined) {\n    return value;\n  }\n\n  if (min !== undefined && max === undefined) {\n    return Math.max(value, min);\n  }\n\n  if (min === undefined && max !== undefined) {\n    return Math.min(value, max);\n  }\n\n  if (min !== undefined && max !== undefined) {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  return value;\n};\n\ntype DebouncedFunction<Args extends unknown[]> = {\n  (...args: Args): void;\n  cancel: () => void;\n};\n\n//debounce function\nexport function debounce<\n  Callback extends (...args: never[]) => unknown,\n  Args extends Parameters<Callback>,\n>(callback: Callback, delay = 0): DebouncedFunction<Args> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let latestArgs: Args | undefined;\n\n  function debouncedFn(this: unknown, ...args: Args): void {\n    latestArgs = args;\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      if (latestArgs) {\n        callback.apply(this, latestArgs);\n      }\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }, delay);\n  }\n\n  debouncedFn.cancel = function cancel(): void {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }\n  };\n\n  return debouncedFn;\n}\n","import { cn } from \"@/utils\";\nimport type {\n  ChartData,\n  ChartOptions,\n  ChartTypeRegistry,\n  InteractionItem,\n  TooltipItem,\n} from \"chart.js\";\nimport {\n  CategoryScale,\n  Chart as ChartJS,\n  Legend,\n  LinearScale,\n  Title,\n  Tooltip,\n  BarController,\n  DoughnutController,\n  BarElement,\n  ArcElement,\n  PointElement,\n  LineElement,\n  RadialLinearScale,\n  ScatterController,\n  PolarAreaController,\n} from \"chart.js\";\nimport type { JSX } from \"react\";\nimport { useRef } from \"react\";\nimport type { ChartProps } from \"react-chartjs-2\";\nimport { Chart as ChartRoot, getElementAtEvent } from \"react-chartjs-2\";\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  Title,\n  Tooltip,\n  Legend,\n  RadialLinearScale,\n  BarElement,\n  ArcElement,\n  PointElement,\n  LineElement,\n  BarController,\n  DoughnutController,\n  ScatterController,\n  PolarAreaController,\n);\n\ntype ChartType = keyof ChartTypeRegistry;\n\ninterface ChartClassNames {\n  root?: string;\n  canvas?: string;\n  title?: string;\n  legend?: string;\n  tooltip?: string;\n}\n\ninterface ChartBaseProps<T extends ChartType> {\n  data: ChartData<T>;\n  options?: ChartOptions<T>;\n  type: T;\n  getElementSelected?: (elementSelected: InteractionItem[]) => void;\n  classNames?: ChartClassNames;\n  width?: number | string;\n  height?: number | string;\n  responsive?: boolean;\n  maintainAspectRatio?: boolean;\n  title?: string;\n  showLegend?: boolean;\n  showTooltip?: boolean;\n  legendPosition?: \"top\" | \"bottom\" | \"left\" | \"right\";\n  customTooltip?: (context: TooltipItem<T>) => string | string[] | undefined;\n}\n\ntype Props<T extends ChartType> = ChartBaseProps<T> &\n  Omit<ChartProps<T>, keyof ChartBaseProps<T>>;\n\nconst defaultClassNames: Required<ChartClassNames> = {\n  root: \"relative w-full h-max flex flex-col items-center border border-default justify-center bg-white dark:bg-content1 p-6 shadow-md rounded-xl\",\n  canvas: \"w-full h-[400px]\",\n  title: \"text-lg font-semibold text-center mb-4\",\n  legend: \"mt-4\",\n  tooltip: \"bg-white p-2 rounded shadow-lg border text-sm\",\n};\n\nexport const Chart = <T extends ChartType>({\n  type,\n  data,\n  options,\n  getElementSelected,\n  classNames = {},\n  responsive = true,\n  maintainAspectRatio = false,\n  title,\n  showLegend = true,\n  showTooltip = true,\n  legendPosition = \"top\",\n  customTooltip,\n  ...props\n}: Props<T>): JSX.Element => {\n  const chartRef = useRef<ChartJS<T>>(null);\n\n  const mergedClassNames = {\n    root: cn(defaultClassNames.root, classNames.root),\n    canvas: cn(defaultClassNames.canvas, classNames.canvas),\n    title: cn(defaultClassNames.title, classNames.title),\n    legend: cn(defaultClassNames.legend, classNames.legend),\n    tooltip: cn(defaultClassNames.tooltip, classNames.tooltip),\n  };\n\n  const handleClick = (event: React.MouseEvent<HTMLCanvasElement>): void => {\n    if (chartRef.current !== null) {\n      const element = getElementAtEvent(\n        chartRef.current as unknown as ChartJS<keyof ChartTypeRegistry>,\n        event,\n      );\n      if (element.length > 0 && getElementSelected) {\n        getElementSelected(element);\n      }\n    }\n  };\n  const defaultOptions: ChartOptions<T> = {\n    responsive,\n    maintainAspectRatio,\n    plugins: {\n      title:\n        title !== undefined\n          ? {\n              display: true,\n              text: title,\n              font: {\n                size: 16,\n                weight: \"bold\",\n              },\n              padding: {\n                top: 10,\n                bottom: 20,\n              },\n            }\n          : undefined,\n      legend: {\n        display: showLegend,\n        position: legendPosition,\n      },\n      tooltip: showTooltip\n        ? {\n            enabled: true,\n            backgroundColor: \"white\",\n            titleColor: \"#1f2937\",\n            bodyColor: \"#4b5563\",\n            borderColor: \"#e5e7eb\",\n            borderWidth: 1,\n            padding: 8,\n            cornerRadius: 4,\n            bodyFont: {\n              size: 14,\n            },\n            titleFont: {\n              size: 14,\n              weight: \"bold\" as const,\n            },\n            ...(customTooltip && {\n              callbacks: {\n                label: customTooltip,\n              },\n            }),\n          }\n        : undefined,\n    },\n  } as ChartOptions<T>;\n\n  const mergedOptions: ChartOptions<T> = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  return (\n    <div className={mergedClassNames.root}>\n      <ChartRoot\n        ref={chartRef}\n        data={data}\n        options={mergedOptions}\n        type={type}\n        onClick={handleClick}\n        className={mergedClassNames.canvas}\n        {...props}\n      />\n    </div>\n  );\n};\n\nChart.displayName = \"Chart\";\n\nexport type {\n  ChartType,\n  ChartClassNames,\n  ChartTypeRegistry,\n  ChartJS,\n  ChartOptions,\n  ChartProps,\n  ChartBaseProps,\n};\n"]}