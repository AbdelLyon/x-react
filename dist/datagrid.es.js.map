{"version":3,"sources":["../src/datagrid/useDataGridState.ts","../src/data/default.ts","../src/datagrid/DataGridSkeleton.tsx","../src/datagrid/DataGrid.tsx"],"names":["columns","_","jsx","jsxs","DataTable","TableHeader","TableColumn","TableBody","TableRow","TableCell"],"mappings":";;;;;;;AAoCO,IAAM,mBAAmB,CAAwB;AAAA,EACtD,OAAA;AAAA,EACA,YAAA;AAAA,EACA;AACF,CAGwB,KAAA;AACtB,EAAA,MAAM,CAAC,UAAA,EAAY,aAAa,CAAA,GAAI,QAAwB,CAAA;AAAA,IAC1D,KAAO,EAAA,IAAA;AAAA,IACP,SAAW,EAAA;AAAA,GACZ,CAAA;AAED,EAAA,MAAM,gBAAmB,GAAA,OAAA,CAAQ,GAAI,CAAA,CAAC,QAAQ,KAAW,MAAA;AAAA,IACvD,GAAG,MAAA;AAAA,IACH,GAAA,EACE,OAAO,MAAA,CAAO,KAAU,KAAA,QAAA,GAAW,OAAO,MAAO,CAAA,KAAK,CAAI,GAAA,MAAA,CAAO,KAAK,CAAA;AAAA,IACxE,QAAQ,MAAO,CAAA;AAAA,GACf,CAAA,CAAA;AAEF,EAAM,MAAA,mBAAA,GAAsB,CAAC,MAAsC,KAAA;AACjE,IAAA,OAAO,OAAO,MAAO,CAAA,MAAA,KAAW,YAAY,MAAO,CAAA,MAAA,CAAO,SAAS,CAC/D,GAAA,MAAA,CAAO,SACP,OAAO,MAAA,CAAO,QAAQ,QAAY,IAAA,MAAA,CAAO,IAAI,MAAS,GAAA,CAAA,GACpD,OAAO,GACP,GAAA,QAAA;AAAA,GACR;AAEA,EAAM,MAAA,gBAAA,GAAmB,CAAC,MAAoC,KAAA;AAC5D,IAAO,OAAA,OAAO,WAAW,QAAY,IAAA,MAAA,CAAO,SAAS,CACjD,GAAA,CAAA,QAAA,EAAW,MAAM,CACjB,CAAA,GAAA,aAAA;AAAA,GACN;AAEA,EAAA,MAAM,gBAAmB,GAAA,CACvB,SACA,EAAA,GAAA,EACAA,QACoB,KAAA;AACpB,IAAA,MAAM,SAASA,QAAQ,CAAA,IAAA;AAAA,MACrB,CAAC,CACC,KAAA,OAAO,CAAE,CAAA,KAAA,KAAU,QAAY,IAAA,MAAA,CAAO,CAAE,CAAA,KAAK,CAAM,KAAA,MAAA,CAAO,SAAS;AAAA,KACvE;AAEA,IAAA,IAAI,WAAW,KAAW,CAAA,EAAA;AACxB,MAAO,OAAA,IAAA;AAAA;AAGT,IAAI,IAAA,MAAA,CAAO,SAAS,KAAW,CAAA,EAAA;AAC7B,MAAO,OAAA,MAAA,CAAO,KAAK,GAAG,CAAA;AAAA;AAGxB,IACE,IAAA,OAAO,MAAO,CAAA,KAAA,KAAU,QACxB,IAAA,MAAA,CAAO,MAAM,MAAS,GAAA,CAAA,IACtB,MAAO,CAAA,KAAA,IAAS,GAChB,EAAA;AACA,MAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,MAAA,CAAO,KAAgB,CAAA;AACzC,MAAO,OAAA,OAAO,UAAU,QAAY,IAAA,OAAO,UAAU,QACjD,GAAA,MAAA,CAAO,KAAK,CACZ,GAAA,IAAA;AAAA;AAGN,IAAO,OAAA,IAAA;AAAA,GACT;AAEA,EAAM,MAAA,MAAA,GAAS,CAAC,MAAoC,KAAA;AAClD,IAAA,MAAM,gBAAgB,OAAQ,CAAA,IAAA;AAAA,MAC5B,CAAC,CAAA,KACC,OAAO,CAAA,CAAE,UAAU,QACnB,IAAA,CAAA,CAAE,KAAM,CAAA,MAAA,GAAS,CACjB,IAAA,MAAA,CAAO,CAAE,CAAA,KAAK,MAAM,MAAO,CAAA;AAAA,KAC/B;AAEA,IAAA,MAAM,cAAc,aAAe,EAAA,KAAA;AAEnC,IAAI,IAAA,WAAA,KAAgB,KAAa,CAAA,IAAA,WAAA,KAAgB,SAAW,EAAA;AAC1D,MAAc,aAAA,CAAA;AAAA,QACZ,KAAO,EAAA,WAAA;AAAA,QACP,SAAW,EAAA,UAAA,CAAW,SAAc,KAAA,KAAA,GAAQ,MAAS,GAAA;AAAA,OACtD,CAAA;AACD,MAAA,YAAA;AAAA,QACE,WAAA;AAAA,QACA,UAAA,CAAW,SAAc,KAAA,KAAA,GAAQ,MAAS,GAAA;AAAA,OAC5C;AAAA;AACF,GACF;AAEA,EAAM,MAAA,gBAAA,GAAmB,CAAC,CAA2C,KAAA;AACnE,IAAA,MAAM,UAAU,CAAE,CAAA,aAAA;AAElB,IAAA,IAAI,OAAQ,CAAA,SAAA,GAAY,OAAQ,CAAA,YAAA,IAAgB,QAAQ,YAAc,EAAA;AACpE,MAAkB,eAAA,IAAA;AAAA;AACpB,GACF;AAEA,EAAO,OAAA;AAAA,IACL,UAAA;AAAA,IACA,MAAA;AAAA,IACA,gBAAA;AAAA,IACA,mBAAA;AAAA,IACA,gBAAA;AAAA,IACA,gBAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA;;;AC7IO,IAAM,aAAgB,GAAA;AAAA,EAC3B,QAAU,EAAA;AAAA,IACR,KAAO,EAAA,aAAA;AAAA,IACP,EAAI,EAAA,2BAAA;AAAA,IACJ,EAAI,EAAA;AAAA,GACN;AAAA,EACA,OAAS,EAAA;AAAA,IACP,KAAO,EAAA,aAAA;AAAA,IACP,EAAI,EAAA,2BAAA;AAAA,IACJ,EAAI,EAAA;AAAA,GACN;AAAA,EACA,QAAU,EAAA;AAAA,IACR,KAAO,EAAA,aAAA;AAAA,IACP,EAAI,EAAA,2BAAA;AAAA,IACJ,EAAI,EAAA;AAAA;AAER,CAAA;ACKO,IAAM,mBAAmB,CAAC;AAAA,EAC/B,OAAU,GAAA,CAAA;AAAA,EACV,IAAO,GAAA,CAAA;AAAA,EACP,iBAAoB,GAAA,IAAA;AAAA,EACpB,OAAU,GAAA,UAAA;AAAA,EACV;AACF,CAA0C,KAAA;AACxC,EAAM,MAAA,cAAA,GAAiB,cAAc,OAAO,CAAA;AAC5C,EAAM,MAAA,aAAA,GAAgB,iBAAoB,GAAA,OAAA,GAAU,CAAI,GAAA,OAAA;AAExD,EAAA,4BACG,KAAM,EAAA,EAAA,MAAA,EAAO,IAAK,EAAA,YAAA,EAAW,gBAAe,SAC3C,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA,CAAC,eAAY,SAAW,EAAA,EAAA,CAAG,cAAe,CAAA,KAAK,GAC5C,QAAM,EAAA,KAAA,CAAA,aAAa,CACjB,CAAA,IAAA,CAAK,IAAI,CACT,CAAA,GAAA,CAAI,CAAC,CAAG,EAAA,KAAA,yBACN,WAAwB,EAAA,EAAA,SAAA,EAAW,EAAG,CAAA,cAAA,CAAe,EAAE,CACrD,EAAA,QAAA,EAAA,KAAA,KAAU,CAAK,IAAA,iBAAA,uBACb,QAAS,EAAA,EAAA,SAAA,EAAU,mBAAoB,EAAA,CAAA,uBAEvC,QAAS,EAAA,EAAA,SAAA,EAAU,uBAAsB,CAJ5B,EAAA,EAAA,KAMlB,CACD,CACL,EAAA,CAAA;AAAA,oBAEA,GAAA,CAAC,aACE,QAAM,EAAA,KAAA,CAAA,IAAI,EACR,IAAK,CAAA,IAAI,CACT,CAAA,GAAA,CAAI,CAAC,CAAA,EAAG,6BACN,GAAA,CAAA,QAAA,EAAA,EAAwB,WAAW,EAAG,CAAA,cAAA,CAAe,EAAE,CACrD,EAAA,QAAA,EAAA,KAAA,CAAM,aAAa,CAAA,CACjB,IAAK,CAAA,IAAI,EACT,GAAI,CAAA,CAACC,IAAG,QACP,qBAAA,GAAA,CAAC,aACE,QAAa,EAAA,QAAA,KAAA,CAAA,IAAK,iBACjB,mBAAA,GAAA,CAAC,QAAS,EAAA,EAAA,SAAA,EAAU,qBAAoB,CAExC,mBAAA,GAAA,CAAC,QAAS,EAAA,EAAA,SAAA,EAAU,qCAAsC,EAAA,CAAA,EAAA,EAJ9C,QAMhB,CACD,CAAA,EAAA,EAXU,QAYf,CACD,CACL,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;ACpDO,SAAS,QAA4C,CAAA;AAAA,EAC1D,IAAA;AAAA,EACA,OAAA;AAAA,EACA,YAAA;AAAA,EACA,OAAU,GAAA,UAAA;AAAA,EACV,SAAY,GAAA,KAAA;AAAA,EACZ,eAAA;AAAA,EACA,aAAA;AAAA,EACA,GAAG;AACL,CAAkC,EAAA;AAChC,EAAM,MAAA;AAAA,IACJ,UAAA;AAAA,IACA,gBAAA;AAAA,IACA,gBAAA;AAAA,IACA,gBAAA;AAAA,IACA,mBAAA;AAAA,IACA,MAAA;AAAA,IACA;AAAA,MACE,gBAAiB,CAAA;AAAA,IACnB,YAAA;AAAA,IACA,OAAA;AAAA,IACA;AAAA,GACD,CAAA;AAED,EAAM,MAAA,cAAA,GAAiB,cAAc,OAAO,CAAA;AAE5C,EAAA,IAAI,SAAW,EAAA;AACb,IAAA,uBACEC,GAAAA;AAAA,MAAC,gBAAA;AAAA,MAAA;AAAA,QACC,SAAS,OAAQ,CAAA,MAAA;AAAA,QACjB,mBAAmB,KAAM,CAAA,uBAAA;AAAA,QACzB,OAAA;AAAA,QACA,MAAM,IAAK,CAAA;AAAA;AAAA,KACb;AAAA;AAIJ,EAAA,uBACEC,IAAAA;AAAA,IAACC,KAAA;AAAA,IAAA;AAAA,MACC,YAAW,EAAA,WAAA;AAAA,MACV,GAAG,KAAA;AAAA,MACJ,UAAY,EAAA;AAAA,QACV,GAAG,KAAM,CAAA,UAAA;AAAA,QACT,IAAI,EAAG,CAAA,cAAA,CAAe,EAAI,EAAA,KAAA,CAAM,YAAY,EAAE,CAAA;AAAA,QAC9C,IAAI,EAAG,CAAA,cAAA,CAAe,EAAI,EAAA,KAAA,CAAM,YAAY,EAAE;AAAA,OAChD;AAAA,MACA,QAAU,EAAA,gBAAA;AAAA,MAEV,QAAA,EAAA;AAAA,wBAAAF,GAAAA;AAAA,UAACG,WAAAA;AAAA,UAAA;AAAA,YACC,OAAS,EAAA,gBAAA;AAAA,YACR,GAAG,aAAe,EAAA,gBAAA;AAAA,YAElB,QAAA,EAAA,CAAC,2BACAH,GAAAA;AAAA,cAACI,WAAAA;AAAA,cAAA;AAAA,gBAEC,YAAA,EAAY,oBAAoB,MAAM,CAAA;AAAA,gBACrC,GAAG,aAAe,EAAA,gBAAA;AAAA,gBAEnB,QAAAH,kBAAAA,IAAAA,CAAC,KAAI,EAAA,EAAA,SAAA,EAAU,yBACZ,EAAA,QAAA,EAAA;AAAA,kBAAO,MAAA,CAAA,MAAA;AAAA,kBACP,MAAA,CAAO,QAAa,KAAA,KAAA,oBACnBA,IAAAA;AAAA,oBAAC,KAAA;AAAA,oBAAA;AAAA,sBACC,SAAA,EAAW,GAAG,gCAAgC,CAAA;AAAA,sBAC9C,OAAA,EAAS,MAAM,MAAA,CAAO,MAAM,CAAA;AAAA,sBAC5B,IAAK,EAAA,QAAA;AAAA,sBACL,YAAA,EAAY,gBAAiB,CAAA,MAAA,CAAO,MAAM,CAAA;AAAA,sBAE1C,QAAA,EAAA;AAAA,wCAAAD,GAAAA;AAAA,0BAAC,aAAA;AAAA,0BAAA;AAAA,4BACC,IAAM,EAAA,EAAA;AAAA,4BACN,SAAW,EAAA,EAAA;AAAA,8BACT,iBAAA;AAAA,8BACA,WAAW,KAAU,KAAA,MAAA,CAAO,OAC1B,UAAW,CAAA,SAAA,KAAc,QACvB,aACA,GAAA;AAAA;AACN;AAAA,yBACF;AAAA,wCACAA,GAAAA;AAAA,0BAAC,eAAA;AAAA,0BAAA;AAAA,4BACC,IAAM,EAAA,EAAA;AAAA,4BACN,SAAW,EAAA,EAAA;AAAA,8BACT,gBAAA;AAAA,8BACA,WAAW,KAAU,KAAA,MAAA,CAAO,OAC1B,UAAW,CAAA,SAAA,KAAc,SACvB,aACA,GAAA;AAAA;AACN;AAAA;AACF;AAAA;AAAA;AACF,iBAEJ,EAAA;AAAA,eAAA;AAAA,cAnCK,MAAO,CAAA;AAAA;AAoCd;AAAA,SAEJ;AAAA,wBACAA,GAACK,CAAAA,SAAAA,EAAA,EAAU,KAAA,EAAO,MAAO,GAAG,aAAA,EAAe,cACxC,EAAA,QAAA,EAAA,CAAC,GAAW,KAAA;AACX,UACE,uBAAAL,IAACM,QAAA,EAAA,EAAuB,GAAG,aAAe,EAAA,aAAA,EACvC,QAAC,EAAA,CAAA,SAAA,qBACAN,GAAAA,CAACO,WAAA,EAAW,GAAG,aAAe,EAAA,cAAA,EAC3B,QAAiB,EAAA,gBAAA,CAAA,SAAA,EAAW,KAAK,OAAO,CAAA,EAC3C,CAJW,EAAA,EAAA,GAAA,CAAI,EAMnB,CAAA;AAAA,SAGN,EAAA;AAAA;AAAA;AAAA,GACF;AAEJ","file":"datagrid.es.js","sourcesContent":["import type { ColumnDefinition, ExtendedColumn } from \"@/types/datagrid\";\nimport type { Key } from \"react\";\nimport { useState } from \"react\";\n\n// types.ts\ntype RowIdentifier = string | number;\ntype DataGridRow = { id: RowIdentifier };\ntype SortOrder = \"asc\" | \"desc\";\n\ninterface SortConfig<T> {\n  field: keyof T | null;\n  direction: SortOrder;\n}\n\ninterface DataGridState<T> {\n  sortConfig: SortConfig<T>;\n  processedColumns: ExtendedColumn<T>[];\n  onSort: (column: ExtendedColumn<T>) => void;\n  extractCellValue: (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ) => React.ReactNode;\n  extractColumnHeader: (column: ExtendedColumn<T>) => string;\n  formatSortHeader: (header: React.ReactNode) => string;\n  handleGridScroll: (e: React.UIEvent<HTMLDivElement>) => void;\n}\n\ninterface DataGridProps<T> {\n  rows: T[];\n  columns: ColumnDefinition<T>[];\n  onRowSelectionChange?: (selectedRows: T[]) => void;\n  onSortChange?: (field: keyof T, order: SortOrder) => void;\n  onGridScrollEnd?: () => void;\n}\n\nexport const useDataGridState = <T extends DataGridRow>({\n  columns,\n  onSortChange,\n  onGridScrollEnd,\n}: Pick<\n  DataGridProps<T>,\n  \"columns\" | \"onSortChange\" | \"onGridScrollEnd\"\n>): DataGridState<T> => {\n  const [sortConfig, setSortConfig] = useState<SortConfig<T>>({\n    field: null,\n    direction: \"asc\",\n  });\n\n  const processedColumns = columns.map((column, index) => ({\n    ...column,\n    key:\n      typeof column.field === \"string\" ? String(column.field) : String(index),\n    header: column.header,\n  }));\n\n  const extractColumnHeader = (column: ExtendedColumn<T>): string => {\n    return typeof column.header === \"string\" && column.header.length > 0\n      ? column.header\n      : typeof column.key === \"string\" && column.key.length > 0\n        ? column.key\n        : \"Column\";\n  };\n\n  const formatSortHeader = (header: React.ReactNode): string => {\n    return typeof header === \"string\" && header.length > 0\n      ? `Sort by ${header}`\n      : \"Sort column\";\n  };\n\n  const extractCellValue = (\n    columnKey: Key,\n    row: T,\n    columns: ColumnDefinition<T>[],\n  ): React.ReactNode => {\n    const column = columns.find(\n      (c) =>\n        typeof c.field === \"string\" && String(c.field) === String(columnKey),\n    );\n\n    if (column === undefined) {\n      return null;\n    }\n\n    if (column.cell !== undefined) {\n      return column.cell(row);\n    }\n\n    if (\n      typeof column.field === \"string\" &&\n      column.field.length > 0 &&\n      column.field in row\n    ) {\n      const value = row[column.field as keyof T];\n      return typeof value === \"string\" || typeof value === \"number\"\n        ? String(value)\n        : null;\n    }\n\n    return null;\n  };\n\n  const onSort = (column: ExtendedColumn<T>): void => {\n    const matchedColumn = columns.find(\n      (c) =>\n        typeof c.field === \"string\" &&\n        c.field.length > 0 &&\n        String(c.field) === column.key,\n    );\n\n    const columnField = matchedColumn?.field;\n\n    if (columnField !== undefined && columnField !== \"actions\") {\n      setSortConfig({\n        field: columnField,\n        direction: sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      });\n      onSortChange?.(\n        columnField,\n        sortConfig.direction === \"asc\" ? \"desc\" : \"asc\",\n      );\n    }\n  };\n\n  const handleGridScroll = (e: React.UIEvent<HTMLDivElement>): void => {\n    const element = e.currentTarget;\n\n    if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\n      onGridScrollEnd?.();\n    }\n  };\n\n  return {\n    sortConfig,\n    onSort,\n    extractCellValue,\n    extractColumnHeader,\n    formatSortHeader,\n    processedColumns,\n    handleGridScroll,\n  };\n};\n","export const GRID_VARIANTS = {\n  bordered: {\n    thead: \"bg-content2\",\n    th: \"py4 bg-content2 py-4 h-12\",\n    tr: \"py-4 border-b border-default last:border-b-0 hover:bg-content2 h-12\",\n  },\n  striped: {\n    thead: \"bg-content2\",\n    th: \"py4 bg-content2 py-4 h-12\",\n    tr: \"py-4 even:bg-content2 h-12\",\n  },\n  unstyled: {\n    thead: \"bg-content2\",\n    th: \"py4 bg-content2 py-4 h-12\",\n    tr: \"py-4 hover:bg-content2 h-12\",\n  },\n};\n","import { Skeleton } from \"@nextui-org/react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/react\";\nimport { cn } from \"@/utils\";\nimport type { JSX } from \"react\";\nimport { GRID_VARIANTS } from \"@/data/default\";\n\ninterface DataGridSkeletonProps {\n  columns: number;\n  rows: number;\n  checkboxSelection?: boolean;\n  variant?: \"bordered\" | \"striped\" | \"unstyled\";\n  className?: string;\n}\n\nexport const DataGridSkeleton = ({\n  columns = 5,\n  rows = 5,\n  checkboxSelection = true,\n  variant = \"unstyled\",\n  className,\n}: DataGridSkeletonProps): JSX.Element => {\n  const variantClasses = GRID_VARIANTS[variant];\n  const actualColumns = checkboxSelection ? columns + 1 : columns;\n\n  return (\n    <Table radius=\"sm\" aria-label=\"Loading data\" className={className}>\n      <TableHeader className={cn(variantClasses.thead)}>\n        {Array(actualColumns)\n          .fill(null)\n          .map((_, index) => (\n            <TableColumn key={index} className={cn(variantClasses.th)}>\n              {index === 0 && checkboxSelection ? (\n                <Skeleton className=\"size-4 rounded-md\" />\n              ) : (\n                <Skeleton className=\"h-4 w-24 rounded-md\" />\n              )}\n            </TableColumn>\n          ))}\n      </TableHeader>\n\n      <TableBody>\n        {Array(rows)\n          .fill(null)\n          .map((_, rowIndex) => (\n            <TableRow key={rowIndex} className={cn(variantClasses.tr)}>\n              {Array(actualColumns)\n                .fill(null)\n                .map((_, colIndex) => (\n                  <TableCell key={colIndex}>\n                    {colIndex === 0 && checkboxSelection ? (\n                      <Skeleton className=\"size-4 rounded-md\" />\n                    ) : (\n                      <Skeleton className=\"h-4 w-full max-w-[200px] rounded-md\" />\n                    )}\n                  </TableCell>\n                ))}\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};\n","import { useDataGridState } from \"@/datagrid/useDataGridState\";\nimport { cn } from \"@/utils\";\nimport {\n  Table as DataTable,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/react\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport type { JSX } from \"react\";\nimport { DataGridSkeleton } from \"./DataGridSkeleton\";\nimport type { DataGridProps } from \"@/types/datagrid\";\nimport { GRID_VARIANTS } from \"@/data/default\";\n\nexport function DataGrid<T extends { id: string | number }>({\n  rows,\n  columns,\n  onSortChange,\n  variant = \"unstyled\",\n  isLoading = false,\n  onGridScrollEnd,\n  childrenProps,\n  ...props\n}: DataGridProps<T>): JSX.Element {\n  const {\n    sortConfig,\n    processedColumns,\n    formatSortHeader,\n    extractCellValue,\n    extractColumnHeader,\n    onSort,\n    handleGridScroll,\n  } = useDataGridState({\n    onSortChange,\n    columns,\n    onGridScrollEnd,\n  });\n\n  const variantClasses = GRID_VARIANTS[variant];\n\n  if (isLoading) {\n    return (\n      <DataGridSkeleton\n        columns={columns.length}\n        checkboxSelection={props.showSelectionCheckboxes}\n        variant={variant}\n        rows={rows.length}\n      />\n    );\n  }\n\n  return (\n    <DataTable\n      aria-label=\"data-grid\"\n      {...props}\n      classNames={{\n        ...props.classNames,\n        th: cn(variantClasses.th, props.classNames?.th),\n        tr: cn(variantClasses.tr, props.classNames?.tr),\n      }}\n      onScroll={handleGridScroll}\n    >\n      <TableHeader\n        columns={processedColumns}\n        {...childrenProps?.tableHeaderProps}\n      >\n        {(column) => (\n          <TableColumn\n            key={column.key}\n            aria-label={extractColumnHeader(column)}\n            {...childrenProps?.tableColumnProps}\n          >\n            <div className=\"flex items-center gap-2\">\n              {column.header}\n              {column.sortable !== false && (\n                <div\n                  className={cn(\"relative size-4 cursor-pointer\")}\n                  onClick={() => onSort(column)}\n                  role=\"button\"\n                  aria-label={formatSortHeader(column.header)}\n                >\n                  <IconChevronUp\n                    size={16}\n                    className={cn(\n                      \"absolute -top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"asc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                  <IconChevronDown\n                    size={16}\n                    className={cn(\n                      \"absolute top-1\",\n                      sortConfig.field === column.key &&\n                        sortConfig.direction === \"desc\"\n                        ? \"opacity-100\"\n                        : \"opacity-30\",\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody items={rows} {...childrenProps?.tableBodyProps}>\n        {(row: T) => {\n          return (\n            <TableRow key={row.id} {...childrenProps?.tableRowProps}>\n              {(columnKey) => (\n                <TableCell {...childrenProps?.tableCellProps}>\n                  {extractCellValue(columnKey, row, columns)}\n                </TableCell>\n              )}\n            </TableRow>\n          );\n        }}\n      </TableBody>\n    </DataTable>\n  );\n}\n"]}