{"version":3,"sources":["../src/dropdown/Dropdown.tsx"],"names":["DropdownRoot"],"mappings":";;;;;AAmCO,IAAM,QAAW,GAAA,UAAA;AAAA,EACtB,CACE,EAAE,OAAA,EAAS,QAAU,EAAA,iBAAA,EAAmB,aAAa,UAAY,EAAA,GAAG,KAAM,EAAA,EAC1E,GACG,KAAA;AACH,IAAM,MAAA,eAAA,GAAkB,CAAC,IAAmC,KAAA;AAC1D,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,WAAA,CAAY,IAAI,CAAA;AAAA;AAClB,KACF;AAEA,IACE,uBAAA,IAAA;AAAA,MAACA,UAAA;AAAA,MAAA;AAAA,QACC,GAAA;AAAA,QACA,SAAS,EAAA,IAAA;AAAA,QACT,UAAY,EAAA;AAAA,UACV,IAAM,EAAA,uBAAA;AAAA,UACN,OAAS,EAAA,yCAAA;AAAA,UACT,GAAG;AAAA,SACL;AAAA,QACC,GAAG,KAAA;AAAA,QAEJ,QAAA,EAAA;AAAA,0BAAA,GAAA,CAAC,mBAAiB,QAAQ,EAAA,OAAA,EAAA,CAAA;AAAA,0BAC1B,GAAA,CAAC,gBAAa,SAAU,EAAA,KAAA,EAAO,GAAG,iBAC/B,EAAA,QAAA,EAAA,QAAA,CAAS,GAAI,CAAA,CAAC,OACb,qBAAA,GAAA;AAAA,YAAC,eAAA;AAAA,YAAA;AAAA,cAEC,aAAa,OAAQ,CAAA,WAAA;AAAA,cACrB,cAAY,OAAQ,CAAA,KAAA;AAAA,cAEnB,QAAQ,EAAA,OAAA,CAAA,KAAA,CAAM,GAAI,CAAA,CAAC,IAAS,KAAA;AAC3B,gBAAA,MAAM,EAAE,GAAK,EAAA,KAAA,EAAO,IAAM,EAAA,GAAG,gBAAmB,GAAA,IAAA;AAChD,gBACE,uBAAA,GAAA;AAAA,kBAAC,YAAA;AAAA,kBAAA;AAAA,oBAEC,SAAS,MAAM;AACb,sBAAA,eAAA,CAAgB,EAAE,GAAG,IAAM,EAAA,IAAA,EAAM,CAAA;AAAA,qBACnC;AAAA,oBACC,GAAG,cAAA;AAAA,oBAEH,QAAA,EAAA;AAAA,mBAAA;AAAA,kBANI;AAAA,iBAOP;AAAA,eAEH;AAAA,aAAA;AAAA,YAjBI,OAAQ,CAAA;AAAA,WAmBhB,CACH,EAAA;AAAA;AAAA;AAAA,KACF;AAAA;AAGN;AAEA,QAAA,CAAS,WAAc,GAAA,UAAA","file":"dropdown.js","sourcesContent":["import { forwardRef } from \"react\";\nimport type { DropdownProps, DropdownMenuProps } from \"@nextui-org/react\";\nimport {\n  Dropdown as DropdownRoot,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownSection,\n  DropdownItem,\n} from \"@nextui-org/react\";\n\nexport type DropdownItemConfig = {\n  key: string;\n  label: string;\n  href?: string;\n  isReadOnly?: boolean;\n  className?: string;\n  startContent?: React.ReactNode;\n  endContent?: React.ReactNode;\n  shortcut?: string;\n};\n\nexport interface DropdownSectionConfig {\n  key: string;\n  label?: string;\n  showDivider?: boolean;\n  items: DropdownItemConfig[];\n}\n\ntype Props = {\n  trigger: React.ReactNode;\n  sections: DropdownSectionConfig[];\n  dropdownMenuProps?: DropdownMenuProps;\n  onItemPress?: (item: DropdownItemConfig) => void;\n} & Omit<DropdownProps, \"trigger\" | \"children\">;\n\nexport const Dropdown = forwardRef<HTMLDivElement, Props>(\n  (\n    { trigger, sections, dropdownMenuProps, onItemPress, classNames, ...props },\n    ref,\n  ) => {\n    const handleItemPress = (item: DropdownItemConfig): void => {\n      if (onItemPress) {\n        onItemPress(item);\n      }\n    };\n\n    return (\n      <DropdownRoot\n        ref={ref}\n        showArrow\n        classNames={{\n          base: \"before:bg-default-200\",\n          content: \"p-0 border border-default bg-background\",\n          ...classNames,\n        }}\n        {...props}\n      >\n        <DropdownTrigger>{trigger}</DropdownTrigger>\n        <DropdownMenu className=\"p-3\" {...dropdownMenuProps}>\n          {sections.map((section) => (\n            <DropdownSection\n              key={section.key}\n              showDivider={section.showDivider}\n              aria-label={section.label}\n            >\n              {section.items.map((item) => {\n                const { key, label, href, ...remainingProps } = item;\n                return (\n                  <DropdownItem\n                    key={key}\n                    onPress={() => {\n                      handleItemPress({ ...item, href });\n                    }}\n                    {...remainingProps}\n                  >\n                    {label}\n                  </DropdownItem>\n                );\n              })}\n            </DropdownSection>\n          ))}\n        </DropdownMenu>\n      </DropdownRoot>\n    );\n  },\n);\n\nDropdown.displayName = \"Dropdown\";\n"]}