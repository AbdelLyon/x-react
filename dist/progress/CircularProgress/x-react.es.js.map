{"version":3,"file":"x-react.es.js","sources":["../../../src/progress/CircularProgress.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport type { CircularProgressProps as CircularProgressRootProps } from \"@nextui-org/react\";\nimport { CircularProgress as CircularProgressRoot } from \"@nextui-org/react\";\n\ntype AdditionalCircularProgressProps = {\n  autoIncrement?: boolean;\n  incrementInterval?: number;\n  incrementStep?: number;\n  onValueChange?: (value: number) => void;\n};\n\ntype CircularProgressProps = Omit<CircularProgressRootProps, \"classNames\"> &\n  AdditionalCircularProgressProps & {\n    classNames?: CircularProgressRootProps[\"classNames\"];\n  };\n\nconst defaultProps = {\n  color: \"primary\",\n  size: \"md\",\n  strokeWidth: 3,\n  showValueLabel: false,\n  formatOptions: { style: \"percent\" } as const,\n  value: 0,\n  minValue: 0,\n  maxValue: 100,\n} as const;\n\nconst defaultIncrementProps = {\n  autoIncrement: false,\n  incrementInterval: 500,\n  incrementStep: 10,\n} as const;\n\nexport const CircularProgress = forwardRef<\n  HTMLDivElement,\n  CircularProgressProps\n>(\n  (\n    {\n      // Auto-increment props\n      autoIncrement = defaultIncrementProps.autoIncrement,\n      incrementInterval = defaultIncrementProps.incrementInterval,\n      incrementStep = defaultIncrementProps.incrementStep,\n      onValueChange,\n\n      // NextUI props\n      value = defaultProps.value,\n      minValue = defaultProps.minValue,\n      maxValue = defaultProps.maxValue,\n      formatOptions = defaultProps.formatOptions,\n      valueLabel,\n      classNames,\n      showValueLabel,\n      color,\n      size,\n      ...nextUIProps\n    },\n    ref,\n  ) => {\n    const [currentValue, setCurrentValue] = useState(value);\n\n    useEffect(() => {\n      if (!autoIncrement) {\n        setCurrentValue(value);\n        return;\n      }\n\n      const interval = setInterval(() => {\n        setCurrentValue((v) => {\n          const newValue = v >= maxValue ? minValue : v + incrementStep;\n          onValueChange?.(newValue);\n          return newValue;\n        });\n      }, incrementInterval);\n\n      return () => clearInterval(interval);\n    }, [\n      autoIncrement,\n      value,\n      incrementInterval,\n      incrementStep,\n      maxValue,\n      minValue,\n      onValueChange,\n    ]);\n\n    const getValueLabel = (): ReactNode => {\n      if (valueLabel !== undefined) {\n        return valueLabel;\n      }\n\n      const percentage = (currentValue - minValue) / (maxValue - minValue);\n      return new Intl.NumberFormat(undefined, formatOptions).format(percentage);\n    };\n\n    const circularProgressProps = {\n      ...defaultProps,\n      ...nextUIProps,\n      ref,\n      value: currentValue,\n      minValue,\n      maxValue,\n      formatOptions,\n      valueLabel: getValueLabel(),\n      showValueLabel,\n      color,\n      size,\n      classNames,\n    };\n\n    return <CircularProgressRoot {...circularProgressProps} />;\n  },\n);\n\nCircularProgress.displayName = \"CircularProgress\";\n"],"names":["CircularProgressRoot"],"mappings":";;;AAiBA,MAAM,eAAe;AAAA,EACnB,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,eAAe,EAAE,OAAO,UAAU;AAAA,EAClC,OAAO;AAAA,EACP,UAAU;AAAA,EACV,UAAU;AACZ;AAEA,MAAM,wBAAwB;AAAA,EAC5B,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB,eAAe;AACjB;AAEO,MAAM,mBAAmB;AAAA,EAI9B,CACE;AAAA;AAAA,IAEE,gBAAgB,sBAAsB;AAAA,IACtC,oBAAoB,sBAAsB;AAAA,IAC1C,gBAAgB,sBAAsB;AAAA,IACtC;AAAA;AAAA,IAGA,QAAQ,aAAa;AAAA,IACrB,WAAW,aAAa;AAAA,IACxB,WAAW,aAAa;AAAA,IACxB,gBAAgB,aAAa;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,KAEL,QACG;AACH,UAAM,CAAC,cAAc,eAAe,IAAI,SAAS,KAAK;AAEtD,cAAU,MAAM;AACd,UAAI,CAAC,eAAe;AAClB,wBAAgB,KAAK;AACrB;AAAA,MAAA;AAGI,YAAA,WAAW,YAAY,MAAM;AACjC,wBAAgB,CAAC,MAAM;AACrB,gBAAM,WAAW,KAAK,WAAW,WAAW,IAAI;AAChD,yDAAgB;AACT,iBAAA;AAAA,QAAA,CACR;AAAA,SACA,iBAAiB;AAEb,aAAA,MAAM,cAAc,QAAQ;AAAA,IAAA,GAClC;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAED,UAAM,gBAAgB,MAAiB;AACrC,UAAI,eAAe,QAAW;AACrB,eAAA;AAAA,MAAA;AAGH,YAAA,cAAc,eAAe,aAAa,WAAW;AAC3D,aAAO,IAAI,KAAK,aAAa,QAAW,aAAa,EAAE,OAAO,UAAU;AAAA,IAC1E;AAEA,UAAM,wBAAwB;AAAA,MAC5B,GAAG;AAAA,MACH,GAAG;AAAA,MACH;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY,cAAc;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEO,WAAA,oBAACA,oBAAsB,EAAA,GAAG,sBAAuB,CAAA;AAAA,EAAA;AAE5D;AAEA,iBAAiB,cAAc;"}