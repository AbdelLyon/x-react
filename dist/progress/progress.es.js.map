{"version":3,"file":"progress.es.js","sources":["../../src/progress/Progress.tsx","../../src/progress/CircularProgress.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { ProgressProps as ProgressRootProps } from \"@nextui-org/react\";\nimport { Progress as ProgressRoor } from \"@nextui-org/react\";\n\ntype AdditionalProgressProps = {\n  label?: ReactNode;\n  labelPosition?: \"top\" | \"bottom\" | \"none\";\n  containerClassName?: string;\n  labelClassName?: string;\n};\n\ntype ProgressProps = {\n  classNames?: ProgressRootProps[\"classNames\"];\n} & Omit<ProgressRootProps, \"classNames\"> &\n  AdditionalProgressProps;\n\nconst defaultProps = {\n  size: \"md\",\n  color: \"primary\",\n  radius: \"full\",\n  minValue: 0,\n  maxValue: 100,\n  formatOptions: { style: \"percent\" } as const,\n  showValueLabel: true,\n} as const;\n\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>(\n  (\n    {\n      label,\n      labelPosition = \"top\",\n      containerClassName,\n      labelClassName,\n      value = 0,\n      maxValue = 100,\n      formatOptions = defaultProps.formatOptions,\n      valueLabel,\n      showValueLabel = defaultProps.showValueLabel,\n      classNames,\n      ...nextUIProps\n    },\n    ref,\n  ) => {\n    const getValueLabel = (): string => {\n      const formattedValue = new Intl.NumberFormat(\n        undefined,\n        formatOptions,\n      ).format(value / maxValue);\n\n      if (typeof valueLabel === \"string\" && valueLabel.trim() !== \"\") {\n        return valueLabel;\n      }\n      return formattedValue;\n    };\n\n    const labelComponent =\n      labelPosition === \"none\" ? undefined : (\n        <div\n          className={`\n      flex items-center justify-between\n      text-small font-medium text-default-500\n      ${labelClassName ?? \"\"}\n      ${labelPosition === \"top\" ? \"order-first\" : \"order-last\"}\n    `}\n        >\n          {label !== undefined && <span>{label}</span>}\n          {showValueLabel && <span>{getValueLabel()}</span>}\n        </div>\n      );\n\n    const progressProps = {\n      value,\n      maxValue,\n      formatOptions,\n      showValueLabel,\n      ...nextUIProps,\n      classNames: {\n        ...classNames,\n        base: `w-full ${typeof classNames?.base === \"string\" && classNames.base}`,\n      },\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={`flex w-full max-w-md flex-col gap-2 ${containerClassName}`}\n      >\n        {labelComponent}\n        <ProgressRoor {...defaultProps} {...progressProps} />\n      </div>\n    );\n  },\n);\n\nProgress.displayName = \"Progress\";\n","import type { ReactNode } from \"react\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport type { CircularProgressProps as CircularProgressRootProps } from \"@nextui-org/react\";\nimport { CircularProgress as CircularProgressRoot } from \"@nextui-org/react\";\n\ntype AdditionalCircularProgressProps = {\n  autoIncrement?: boolean;\n  incrementInterval?: number;\n  incrementStep?: number;\n  onValueChange?: (value: number) => void;\n};\n\ntype CircularProgressProps = Omit<CircularProgressRootProps, \"classNames\"> &\n  AdditionalCircularProgressProps & {\n    classNames?: CircularProgressRootProps[\"classNames\"];\n  };\n\nconst defaultProps = {\n  color: \"primary\",\n  size: \"md\",\n  strokeWidth: 3,\n  showValueLabel: false,\n  formatOptions: { style: \"percent\" } as const,\n  value: 0,\n  minValue: 0,\n  maxValue: 100,\n} as const;\n\nconst defaultIncrementProps = {\n  autoIncrement: false,\n  incrementInterval: 500,\n  incrementStep: 10,\n} as const;\n\nexport const CircularProgress = forwardRef<\n  HTMLDivElement,\n  CircularProgressProps\n>(\n  (\n    {\n      // Auto-increment props\n      autoIncrement = defaultIncrementProps.autoIncrement,\n      incrementInterval = defaultIncrementProps.incrementInterval,\n      incrementStep = defaultIncrementProps.incrementStep,\n      onValueChange,\n\n      // NextUI props\n      value = defaultProps.value,\n      minValue = defaultProps.minValue,\n      maxValue = defaultProps.maxValue,\n      formatOptions = defaultProps.formatOptions,\n      valueLabel,\n      classNames,\n      showValueLabel,\n      color,\n      size,\n      ...nextUIProps\n    },\n    ref,\n  ) => {\n    const [currentValue, setCurrentValue] = useState(value);\n\n    useEffect(() => {\n      if (!autoIncrement) {\n        setCurrentValue(value);\n        return;\n      }\n\n      const interval = setInterval(() => {\n        setCurrentValue((v) => {\n          const newValue = v >= maxValue ? minValue : v + incrementStep;\n          onValueChange?.(newValue);\n          return newValue;\n        });\n      }, incrementInterval);\n\n      return () => clearInterval(interval);\n    }, [\n      autoIncrement,\n      value,\n      incrementInterval,\n      incrementStep,\n      maxValue,\n      minValue,\n      onValueChange,\n    ]);\n\n    const getValueLabel = (): ReactNode => {\n      if (valueLabel !== undefined) {\n        return valueLabel;\n      }\n\n      const percentage = (currentValue - minValue) / (maxValue - minValue);\n      return new Intl.NumberFormat(undefined, formatOptions).format(percentage);\n    };\n\n    const circularProgressProps = {\n      ...defaultProps,\n      ...nextUIProps,\n      ref,\n      value: currentValue,\n      minValue,\n      maxValue,\n      formatOptions,\n      valueLabel: getValueLabel(),\n      showValueLabel,\n      color,\n      size,\n      classNames,\n    };\n\n    return <CircularProgressRoot {...circularProgressProps} />;\n  },\n);\n\nCircularProgress.displayName = \"CircularProgress\";\n"],"names":["defaultProps","ProgressRoor","CircularProgressRoot"],"mappings":"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"}