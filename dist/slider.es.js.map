{"version":3,"sources":["../src/slider/Slider.tsx"],"names":["SliderRoot"],"mappings":";;;;;AA8BA,IAAM,kBAAA,GAAqB,CACzB,KAAA,EACA,aACW,KAAA;AACX,EAAA,OAAO,KACJ,CAAA,GAAA;AAAA,IAAI,CAAC,CACJ,KAAA,aAAA,GACI,IAAI,IAAA,CAAK,YAAa,CAAA,KAAA,CAAA,EAAW,aAAa,CAAA,CAAE,MAAO,CAAA,CAAC,CACxD,GAAA;AAAA,GACN,CACC,KAAK,UAAK,CAAA;AACf,CAAA;AAEA,IAAM,iBAAiB,CAAC;AAAA,EACtB,QAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAA6B,KAAA;AAC3B,EAAA,IAAI,aAAa,MAAQ,EAAA;AACvB,IAAO,OAAA,IAAA;AAAA;AAGT,EACE,uBAAA,GAAA;AAAA,IAAC,GAAA;AAAA,IAAA;AAAA,MACC,WAAW,CAA2C,wCAAA,EAAA,SAAS,IAAI,QAAa,KAAA,KAAA,GAAQ,gBAAgB,YAAY,CAAA,CAAA;AAAA,MAEnH,QAAA,EAAA;AAAA;AAAA,GACH;AAEJ,CAAA;AAEO,IAAM,WAAc,GAAA,UAAA;AAAA,EACzB,CACE;AAAA,IACE,WAAA;AAAA,IACA,YAAA,GAAe,CAAC,CAAA,EAAG,GAAG,CAAA;AAAA,IACtB,aAAA;AAAA,IACA,KAAA;AAAA,IACA,aAAgB,GAAA,QAAA;AAAA,IAChB,WAAA;AAAA,IACA,WAAA;AAAA,IACA,QAAA;AAAA,IACA,kBAAA;AAAA,IACA;AAAA,KAEF,GACG,KAAA;AACH,IAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAI,SAAmB,YAAY,CAAA;AAEzD,IAAM,MAAA,YAAA,GAAe,CAAC,QAAsC,KAAA;AAC1D,MAAA,MAAM,aAAa,KAAM,CAAA,OAAA,CAAQ,QAAQ,CAAI,GAAA,QAAA,GAAW,CAAC,QAAQ,CAAA;AACjE,MAAA,QAAA,CAAS,UAAU,CAAA;AACnB,MAAA,QAAA,GAAW,UAAU,CAAA;AAAA,KACvB;AAEA,IAAA,MAAM,iBAAiB,WACnB,GAAA,WAAA,CAAY,KAAK,CACjB,GAAA,kBAAA,CAAmB,OAAO,aAAa,CAAA;AAC3C,IAAM,MAAA,YAAA,GAAe,cACjB,WAAY,CAAA,KAAK,IACjB,CAAG,EAAA,KAAK,KAAK,cAAc,CAAA,CAAA;AAE/B,IACE,uBAAA,IAAA;AAAA,MAAC,KAAA;AAAA,MAAA;AAAA,QACC,GAAA;AAAA,QACA,SAAA,EAAW,wEAAwE,kBAAkB,CAAA,CAAA;AAAA,QAErG,QAAA,EAAA;AAAA,0BAAA,GAAA;AAAA,YAAC,cAAA;AAAA,YAAA;AAAA,cACC,QAAU,EAAA,aAAA;AAAA,cACV,OAAS,EAAA,YAAA;AAAA,cACT,SAAW,EAAA;AAAA;AAAA,WACb;AAAA,0BACA,GAAA;AAAA,YAACA,MAAA;AAAA,YAAA;AAAA,cACC,KAAA;AAAA,cACA,QAAU,EAAA,YAAA;AAAA,cACV,KAAA;AAAA,cACA,SAAU,EAAA,UAAA;AAAA,cACV,aAAA;AAAA,cACC,GAAG;AAAA;AAAA;AACN;AAAA;AAAA,KACF;AAAA;AAGN;AAEA,WAAA,CAAY,WAAc,GAAA,aAAA","file":"slider.es.js","sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef, useState } from \"react\";\nimport type { SliderProps } from \"@nextui-org/react\";\nimport { Slider as SliderRoot } from \"@nextui-org/react\";\n\ninterface FormatConfig {\n  formatOptions?: Intl.NumberFormatOptions;\n  formatValue?: (value: number[]) => string;\n  renderLabel?: (value: number[]) => ReactNode;\n}\n\ninterface StyleProps {\n  containerClassName?: string;\n  labelClassName?: string;\n}\n\ninterface RangeSliderProps extends FormatConfig, StyleProps {\n  sliderProps?: Omit<SliderProps, \"value\" | \"onChange\">;\n  initialValue?: number[];\n  label?: string;\n  labelPosition?: \"top\" | \"bottom\" | \"none\";\n  onChange?: (value: number[]) => void;\n}\n\ninterface LabelProps {\n  position: \"top\" | \"bottom\" | \"none\";\n  content: ReactNode;\n  className?: string;\n}\n\nconst defaultFormatValue = (\n  value: number[],\n  formatOptions?: Intl.NumberFormatOptions,\n): string => {\n  return value\n    .map((v) =>\n      formatOptions\n        ? new Intl.NumberFormat(undefined, formatOptions).format(v)\n        : v,\n    )\n    .join(\" â€“ \");\n};\n\nconst LabelComponent = ({\n  position,\n  content,\n  className,\n}: LabelProps): ReactNode => {\n  if (position === \"none\") {\n    return null;\n  }\n\n  return (\n    <p\n      className={`text-small font-medium text-default-500 ${className} ${position === \"top\" ? \"order-first\" : \"order-last\"}`}\n    >\n      {content}\n    </p>\n  );\n};\n\nexport const RangeSlider = forwardRef<HTMLDivElement, RangeSliderProps>(\n  (\n    {\n      sliderProps,\n      initialValue = [0, 100],\n      formatOptions,\n      label,\n      labelPosition = \"bottom\",\n      formatValue,\n      renderLabel,\n      onChange,\n      containerClassName,\n      labelClassName,\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<number[]>(initialValue);\n\n    const handleChange = (newValue: number | number[]): void => {\n      const typedValue = Array.isArray(newValue) ? newValue : [newValue];\n      setValue(typedValue);\n      onChange?.(typedValue);\n    };\n\n    const formattedValue = formatValue\n      ? formatValue(value)\n      : defaultFormatValue(value, formatOptions);\n    const labelContent = renderLabel\n      ? renderLabel(value)\n      : `${label}: ${formattedValue}`;\n\n    return (\n      <div\n        ref={ref}\n        className={`flex h-max w-full max-w-md flex-col items-start justify-center gap-2 ${containerClassName}`}\n      >\n        <LabelComponent\n          position={labelPosition}\n          content={labelContent}\n          className={labelClassName}\n        />\n        <SliderRoot\n          value={value}\n          onChange={handleChange}\n          label={label}\n          className=\"max-w-md\"\n          formatOptions={formatOptions}\n          {...sliderProps}\n        />\n      </div>\n    );\n  },\n);\n\nRangeSlider.displayName = \"RangeSlider\";\n"]}