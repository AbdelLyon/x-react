{"version":3,"file":"index.js","sources":["../../../src/dropdown/Dropdown.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport type { DropdownProps, DropdownMenuProps } from \"@nextui-org/react\";\nimport {\n  Dropdown as DropdownRoot,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownSection,\n  DropdownItem,\n} from \"@nextui-org/react\";\n\nexport type DropdownItemConfig = {\n  key: string;\n  label: string;\n  href?: string;\n  isReadOnly?: boolean;\n  className?: string;\n  startContent?: React.ReactNode;\n  endContent?: React.ReactNode;\n  shortcut?: string;\n};\n\nexport interface DropdownSectionConfig {\n  key: string;\n  label?: string;\n  showDivider?: boolean;\n  items: DropdownItemConfig[];\n}\n\ntype Props = {\n  trigger: React.ReactNode;\n  sections: DropdownSectionConfig[];\n  dropdownMenuProps?: DropdownMenuProps;\n  onItemPress?: (item: DropdownItemConfig) => void;\n} & Omit<DropdownProps, \"trigger\" | \"children\">;\n\nexport const Dropdown = forwardRef<HTMLDivElement, Props>(\n  (\n    { trigger, sections, dropdownMenuProps, onItemPress, classNames, ...props },\n    ref,\n  ) => {\n    const handleItemPress = (item: DropdownItemConfig): void => {\n      if (onItemPress) {\n        onItemPress(item);\n      }\n    };\n\n    return (\n      <DropdownRoot\n        ref={ref}\n        showArrow\n        classNames={{\n          base: \"before:bg-default-200\",\n          content: \"p-0 border border-default bg-background\",\n          ...classNames,\n        }}\n        {...props}\n      >\n        <DropdownTrigger>{trigger}</DropdownTrigger>\n        <DropdownMenu className=\"p-3\" {...dropdownMenuProps}>\n          {sections.map((section) => (\n            <DropdownSection\n              key={section.key}\n              showDivider={section.showDivider}\n              aria-label={section.label}\n            >\n              {section.items.map((item) => {\n                const { key, label, href, ...remainingProps } = item;\n                return (\n                  <DropdownItem\n                    key={key}\n                    onPress={() => {\n                      handleItemPress({ ...item, href });\n                    }}\n                    {...remainingProps}\n                  >\n                    {label}\n                  </DropdownItem>\n                );\n              })}\n            </DropdownSection>\n          ))}\n        </DropdownMenu>\n      </DropdownRoot>\n    );\n  },\n);\n\nDropdown.displayName = \"Dropdown\";\n"],"names":["Dropdown","forwardRef","trigger","sections","dropdownMenuProps","onItemPress","classNames","props","ref","handleItemPress","item","jsxs","DropdownRoot","jsx","DropdownTrigger","DropdownMenu","section","DropdownSection","key","label","href","remainingProps","DropdownItem"],"mappings":";;;AAmCO,MAAMA,IAAWC;AAAA,EACtB,CACE,EAAE,SAAAC,GAAS,UAAAC,GAAU,mBAAAC,GAAmB,aAAAC,GAAa,YAAAC,GAAY,GAAGC,EAAM,GAC1EC,MACG;AACG,UAAAC,IAAkB,CAACC,MAAmC;AAC1D,MAAIL,KACFA,EAAYK,CAAI;AAAA,IAEpB;AAGE,WAAA,gBAAAC;AAAA,MAACC;AAAAA,MAAA;AAAA,QACC,KAAAJ;AAAA,QACA,WAAS;AAAA,QACT,YAAY;AAAA,UACV,MAAM;AAAA,UACN,SAAS;AAAA,UACT,GAAGF;AAAA,QACL;AAAA,QACC,GAAGC;AAAA,QAEJ,UAAA;AAAA,UAAA,gBAAAM,EAACC,KAAiB,UAAQZ,EAAA,CAAA;AAAA,UAC1B,gBAAAW,EAACE,KAAa,WAAU,OAAO,GAAGX,GAC/B,UAAAD,EAAS,IAAI,CAACa,MACb,gBAAAH;AAAA,YAACI;AAAA,YAAA;AAAA,cAEC,aAAaD,EAAQ;AAAA,cACrB,cAAYA,EAAQ;AAAA,cAEnB,UAAQA,EAAA,MAAM,IAAI,CAACN,MAAS;AAC3B,sBAAM,EAAE,KAAAQ,GAAK,OAAAC,GAAO,MAAAC,GAAM,GAAGC,EAAmB,IAAAX;AAE9C,uBAAA,gBAAAG;AAAA,kBAACS;AAAA,kBAAA;AAAA,oBAEC,SAAS,MAAM;AACb,sBAAAb,EAAgB,EAAE,GAAGC,GAAM,MAAAU,GAAM;AAAA,oBACnC;AAAA,oBACC,GAAGC;AAAA,oBAEH,UAAAF;AAAA,kBAAA;AAAA,kBANID;AAAA,gBAOP;AAAA,cAEH,CAAA;AAAA,YAAA;AAAA,YAjBIF,EAAQ;AAAA,UAAA,CAmBhB,EACH,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EAAA;AAGN;AAEAhB,EAAS,cAAc;"}