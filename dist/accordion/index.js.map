{"version":3,"sources":["../../src/utils/index.ts","../../src/accordion/Accordion.tsx"],"names":["AccordionRoot"],"mappings":";;;;;;;AAGO,IAAM,EAAA,GAAK,IAAI,MAAiC,KAAA;AACrD,EAAO,OAAA,OAAA,CAAQ,IAAK,CAAA,MAAM,CAAC,CAAA;AAC7B,CAAA;ACcO,IAAM,SAAY,GAAA,UAAA;AAAA,EACvB,CAAC,EAAE,KAAA,EAAO,aAAa,GAAG,cAAA,IAAkB,GAAQ,KAAA;AAClD,IAAA,MAAM,kBAAqB,GAAA;AAAA,MACzB,IAAA,EAAM,GAAG,qBAAuB,EAAA;AAAA,QAC9B,8DAAA,EACE,eAAe,OAAY,KAAA;AAAA,OAC9B,CAAA;AAAA,MACD,KAAO,EAAA;AAAA,KACT;AACA,IAAA,MAAM,gBAAmB,GAAA,EAAA;AAAA,MACvB,YAAA;AAAA,MACA;AAAA,QACE,yBAAA,EAA2B,eAAe,OAAY,KAAA;AAAA,OACxD;AAAA,MACA,cAAe,CAAA;AAAA,KACjB;AAEA,IACE,uBAAA,GAAA;AAAA,MAACA,WAAA;AAAA,MAAA;AAAA,QACC,GAAA;AAAA,QACC,GAAG,cAAA;AAAA,QACJ,SAAW,EAAA,gBAAA;AAAA,QACX,WAAa,EAAA;AAAA,UACX,GAAG,kBAAA;AAAA,UACH,GAAG,WAAA;AAAA,UACH,IAAM,EAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,EAAM,aAAa,IAAI,CAAA;AAAA,UACnD,KAAO,EAAA,EAAA,CAAG,kBAAmB,CAAA,KAAA,EAAO,aAAa,KAAK;AAAA,SACxD;AAAA,QAEC,QAAA,EAAA,KAAA,CAAM,GAAI,CAAA,CAAC,IAAS,KAAA;AACnB,UAAA,MAAM,EAAE,OAAA,EAAS,GAAG,SAAA,EAAc,GAAA,IAAA;AAClC,UACE,uBAAA,aAAA;AAAA,YAAC,aAAA;AAAA,YAAA;AAAA,cACE,GAAG,SAAA;AAAA,cACJ,KAAK,SAAU,CAAA,GAAA;AAAA,cACf,QAAU,EAAA;AAAA;AAAA,WACZ;AAAA,SAEH;AAAA;AAAA,KACH;AAAA;AAGN;AAEA,SAAA,CAAU,WAAc,GAAA,WAAA","file":"index.js","sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport const cn = (...inputs: ClassValue[]): string => {\n  return twMerge(clsx(inputs));\n};\n\nexport const capitalizeFirstLetter = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const concatenateWithSpace = (\n  ...strings: (string | undefined)[]\n): string => strings.filter(Boolean).join(\" \");\n\nexport const startsWith = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\n\nexport const endsWith = (str: string, suffix: string): boolean =>\n  str.endsWith(suffix);\n\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\nexport const trim = (str: string): string => str.trim();\n\nexport const reverse = (str: string): string =>\n  str.split(\"\").reverse().join(\"\");\n\nexport const limitValue = (\n  value: number,\n  min: number | undefined,\n  max: number | undefined,\n): number => {\n  if (min === undefined && max === undefined) {\n    return value;\n  }\n\n  if (min !== undefined && max === undefined) {\n    return Math.max(value, min);\n  }\n\n  if (min === undefined && max !== undefined) {\n    return Math.min(value, max);\n  }\n\n  if (min !== undefined && max !== undefined) {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  return value;\n};\n\ntype DebouncedFunction<Args extends unknown[]> = {\n  (...args: Args): void;\n  cancel: () => void;\n};\n\n//debounce function\nexport function debounce<\n  Callback extends (...args: never[]) => unknown,\n  Args extends Parameters<Callback>,\n>(callback: Callback, delay = 0): DebouncedFunction<Args> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let latestArgs: Args | undefined;\n\n  function debouncedFn(this: unknown, ...args: Args): void {\n    latestArgs = args;\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      if (latestArgs) {\n        callback.apply(this, latestArgs);\n      }\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }, delay);\n  }\n\n  debouncedFn.cancel = function cancel(): void {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }\n  };\n\n  return debouncedFn;\n}\n","import { forwardRef } from \"react\";\nimport { cn } from \"@/utils\";\nimport type { AccordionProps, AccordionItemProps } from \"@nextui-org/react\";\nimport { Accordion as AccordionRoot, AccordionItem } from \"@nextui-org/react\";\n\nexport interface ExtendedAccordionItemProps\n  extends Omit<AccordionItemProps, \"content\"> {\n  content?: React.ReactNode;\n}\n\ninterface AccordionWrapperProps extends Omit<AccordionProps, \"children\"> {\n  items: ExtendedAccordionItemProps[];\n  itemClasses?: {\n    base?: string;\n    title?: string;\n    [key: string]: string | undefined;\n  };\n}\n\nexport const Accordion = forwardRef<HTMLDivElement, AccordionWrapperProps>(\n  ({ items, itemClasses, ...accordionProps }, ref) => {\n    const defaultItemClasses = {\n      base: cn(\"w-full shadow-none \", {\n        \"bg-white dark:bg-content1 border-1 border-default rounded-md\":\n          accordionProps.variant === \"splitted\",\n      }),\n      title: \"text-lg font-semibold\",\n    };\n    const defaultClassName = cn(\n      \"rounded-md\",\n      {\n        \"border-1 border-default\": accordionProps.variant === \"bordered\",\n      },\n      accordionProps.className,\n    );\n\n    return (\n      <AccordionRoot\n        ref={ref}\n        {...accordionProps}\n        className={defaultClassName}\n        itemClasses={{\n          ...defaultItemClasses,\n          ...itemClasses,\n          base: cn(defaultItemClasses.base, itemClasses?.base),\n          title: cn(defaultItemClasses.title, itemClasses?.title),\n        }}\n      >\n        {items.map((item) => {\n          const { content, ...itemProps } = item;\n          return (\n            <AccordionItem\n              {...itemProps}\n              key={itemProps.key}\n              children={content}\n            />\n          );\n        })}\n      </AccordionRoot>\n    );\n  },\n);\n\nAccordion.displayName = \"Accordion\";\n"]}