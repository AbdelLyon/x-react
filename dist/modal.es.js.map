{"version":3,"sources":["../src/modal/Modal.tsx"],"names":["ModalRoot"],"mappings":";;;;;;;AAiDA,IAAM,iBAAoB,GAAA;AAAA,EACxB,WAAa,EAAA,wBAAA;AAAA,EACb,IAAM,EAAA,2EAAA;AAAA,EACN,MAAQ,EAAA,qBAAA;AAAA,EACR,MAAQ,EAAA;AACV,CAAA;AAEA,IAAM,kBAAqB,GAAA;AAAA,EACzB,KAAO,EAAA,SAAA;AAAA,EACP,MAAQ,EAAA;AACV,CAAA;AAEA,IAAM,qBAAqB,CAAC,KAAA,KAC1B,OAAO,KAAU,KAAA,QAAA,IAAY,MAAM,MAAS,GAAA,CAAA;AAM9C,IAAM,eAAe,CAAC;AAAA,EACpB,gBAAmB,GAAA,OAAA;AAAA,EACnB,iBAAA;AAAA,EACA,gBAAA;AAAA,EACA,iBAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAsC,KAAA;AACpC,EAAA,MAAM,eAAe,YAA2B;AAC9C,IAAI,IAAA;AACF,MAAA,MAAM,QAAW,IAAA;AACjB,MAAQ,OAAA,EAAA;AAAA,aACD,KAAO,EAAA;AACd,MAAQ,OAAA,CAAA,KAAA,CAAM,wBAAwB,KAAK,CAAA;AAAA;AAC7C,GACF;AAEA,EAAM,MAAA,kBAAA,GAAqB,mBAAmB,gBAAgB,CAAA;AAC9D,EAAA,MAAM,oBACJ,GAAA,kBAAA,CAAmB,iBAAiB,CAAA,IAAK,QAAa,KAAA,KAAA,CAAA;AAExD,EAAA,uBAEK,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,IACC,kBAAA,oBAAA,GAAA;AAAA,MAAC,MAAA;AAAA,MAAA;AAAA,QACC,SAAW,EAAA,EAAA,CAAG,mBAAqB,EAAA,gBAAA,EAAkB,SAAS,CAAA;AAAA,QAC9D,OAAA,EAAS,kBAAkB,OAAW,IAAA,UAAA;AAAA,QACtC,OAAS,EAAA,OAAA;AAAA,QACR,GAAG,kBAAA;AAAA,QACH,GAAG,gBAAA;AAAA,QAEH,QAAA,EAAA;AAAA;AAAA,KACH;AAAA,IAGD,oBACC,oBAAA,GAAA;AAAA,MAAC,MAAA;AAAA,MAAA;AAAA,QACC,OAAS,EAAA,YAAA;AAAA,QACR,GAAG,kBAAA;AAAA,QACH,GAAG,iBAAA;AAAA,QAEH,QAAA,EAAA;AAAA;AAAA;AACH,GAEJ,EAAA,CAAA;AAEJ,CAAA;AAEO,IAAM,KAAQ,GAAA,UAAA;AAAA,EACnB,CACE;AAAA,IACE,OAAA;AAAA,IACA,KAAA;AAAA,IACA,MAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,gBAAA;AAAA,IACA,iBAAA;AAAA,IACA,gBAAA;AAAA,IACA,iBAAA;AAAA,IACA,eAAkB,GAAA,QAAA;AAAA,IAClB,YAAA;AAAA,IACA,UAAA;AAAA,IACA,GAAG;AAAA,KAEL,GACG,KAAA;AACH,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAQ,EAAA,OAAA,KAAY,aAAc,CAAA;AAAA,MAChD,QAAU,EAAA;AAAA,KACX,CAAA;AACD,IAAA,MAAM,CAAC,QAAA,EAAU,WAAW,CAAA,GAAI,SAAmB,eAAe,CAAA;AAElE,IAAA,MAAM,UAAa,GAAA,WAAA;AAAA,MACjB,CAAC,eAAyB,eAA0B,KAAA;AAClD,QAAA,WAAA,CAAY,YAAY,CAAA;AACxB,QAAO,MAAA,EAAA;AAAA,OACT;AAAA,MACA,CAAC,iBAAiB,MAAM;AAAA,KAC1B;AAEA,IAAA,MAAM,aAAgB,GAAA,WAAA;AAAA,MACpB,CAAC,KAAqD,KAAA;AACpD,QAAA,IAAI,KAAM,CAAA,GAAA,KAAQ,OAAW,IAAA,KAAA,CAAM,QAAQ,GAAK,EAAA;AAC9C,UAAA,KAAA,CAAM,cAAe,EAAA;AACrB,UAAW,UAAA,EAAA;AAAA;AACb,OACF;AAAA,MACA,CAAC,UAAU;AAAA,KACb;AAEA,IAAA,MAAM,eAAkB,GAAA;AAAA,MACtB,WAAa,EAAA,EAAA,CAAG,iBAAkB,CAAA,WAAA,EAAa,YAAY,WAAW,CAAA;AAAA,MACtE,IAAM,EAAA,EAAA,CAAG,iBAAkB,CAAA,IAAA,EAAM,YAAY,IAAI,CAAA;AAAA,MACjD,MAAQ,EAAA,EAAA,CAAG,iBAAkB,CAAA,MAAA,EAAQ,YAAY,MAAM,CAAA;AAAA,MACvD,IAAA,EAAM,EAAG,CAAA,UAAA,EAAY,IAAI,CAAA;AAAA,MACzB,MAAQ,EAAA,EAAA,CAAG,iBAAkB,CAAA,MAAA,EAAQ,YAAY,MAAM,CAAA;AAAA,MACvD,QAAA,EAAU,EAAG,CAAA,UAAA,EAAY,QAAQ;AAAA,KACnC;AAEA,IAAA,uBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,sBAAA,GAAA;AAAA,QAAC,KAAA;AAAA,QAAA;AAAA,UACC,IAAK,EAAA,QAAA;AAAA,UACL,QAAU,EAAA,CAAA;AAAA,UACV,OAAA,EAAS,MAAM,UAAW,EAAA;AAAA,UAC1B,SAAW,EAAA,aAAA;AAAA,UACX,SAAU,EAAA,cAAA;AAAA,UAET,QAAA,EAAA;AAAA;AAAA,OACH;AAAA,sBAEA,GAAA;AAAA,QAACA,OAAA;AAAA,QAAA;AAAA,UACC,GAAA;AAAA,UACA,QAAA;AAAA,UACA,UAAY,EAAA,eAAA;AAAA,UACZ,MAAA;AAAA,UACA,OAAA;AAAA,UACC,GAAG,KAAA;AAAA,UAEJ,QAAA,kBAAA,GAAA,CAAC,YACE,EAAA,EAAA,QAAA,EAAA,sBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,YAAA,KAAA,KAAU,0BACR,GAAA,CAAA,WAAA,EAAA,EAAY,SAAW,EAAA,eAAA,CAAgB,QACrC,QACH,EAAA,KAAA,EAAA,CAAA;AAAA,4BAED,GAAA,CAAA,SAAA,EAAA,EAAU,SAAW,EAAA,eAAA,CAAgB,MACnC,QACH,EAAA,CAAA;AAAA,gCACC,WAAY,EAAA,EAAA,SAAA,EAAW,gBAAgB,MACrC,EAAA,QAAA,EAAA,MAAA,KAAW,SACV,MAEA,mBAAA,GAAA;AAAA,cAAC,YAAA;AAAA,cAAA;AAAA,gBACC,gBAAA;AAAA,gBACA,iBAAA;AAAA,gBACA,gBAAA;AAAA,gBACA,iBAAA;AAAA,gBACA,QAAA;AAAA,gBACA;AAAA;AAAA,aAGN,EAAA;AAAA,WAAA,EACF,CAEJ,EAAA;AAAA;AAAA;AACF,KACF,EAAA,CAAA;AAAA;AAGN;AAEA,KAAA,CAAM,WAAc,GAAA,OAAA","file":"modal.es.js","sourcesContent":["import type { JSX } from \"react\";\nimport { forwardRef, useState, useCallback } from \"react\";\nimport type { ModalProps as ModalPropsRoot } from \"@nextui-org/react\";\nimport {\n  Modal as ModalRoot,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n} from \"@nextui-org/react\";\n\nimport { cn } from \"@/utils\";\nimport { Button, type ButtonProps } from \"@/button\";\n\ntype Backdrop = ModalPropsRoot[\"backdrop\"];\n\ninterface ModalClassNames {\n  wrapper?: string;\n  base?: string;\n  backdrop?: string;\n  header?: string;\n  body?: string;\n  footer?: string;\n  closeButton?: string;\n}\n\ninterface ModalBaseProps {\n  trigger: React.ReactNode;\n  title?: React.ReactNode;\n  footer?: React.ReactNode;\n  children: React.ReactNode;\n  classNames?: ModalClassNames;\n  onOpenChange?: (isOpen: boolean) => void;\n  defaultBackdrop?: Backdrop;\n}\n\ninterface ModalButtonProps {\n  onAction?: () => void | Promise<void>;\n  buttonCloseLabel?: string;\n  buttonActionLabel?: string;\n  buttonCloseProps?: ButtonProps;\n  buttonActionProps?: ButtonProps;\n}\n\nexport type ModalProps = Omit<Partial<ModalPropsRoot>, keyof ModalBaseProps> &\n  ModalBaseProps &\n  ModalButtonProps;\n\nconst defaultClassNames = {\n  closeButton: \"absolute right-4 top-4\",\n  base: \"bg-background border border-default shadow-lg dark:shadow-none rounded-lg\",\n  header: \"flex flex-col gap-1\",\n  footer: \"flex justify-end gap-2\",\n} as const;\n\nconst defaultButtonProps = {\n  color: \"primary\" as const,\n  radius: \"sm\" as const,\n} as const;\n\nconst isValidButtonLabel = (label: unknown): label is string =>\n  typeof label === \"string\" && label.length > 0;\n\ninterface ModalButtonsProps extends ModalButtonProps {\n  onClose: () => void;\n}\n\nconst ModalButtons = ({\n  buttonCloseLabel = \"Close\",\n  buttonActionLabel,\n  buttonCloseProps,\n  buttonActionProps,\n  onAction,\n  onClose,\n}: ModalButtonsProps): JSX.Element => {\n  const handleAction = async (): Promise<void> => {\n    try {\n      await onAction?.();\n      onClose();\n    } catch (error) {\n      console.error(\"Modal action failed:\", error);\n    }\n  };\n\n  const hasValidCloseLabel = isValidButtonLabel(buttonCloseLabel);\n  const hasValidActionButton =\n    isValidButtonLabel(buttonActionLabel) && onAction !== undefined;\n\n  return (\n    <>\n      {hasValidCloseLabel && (\n        <Button\n          className={cn(\"border-primary/50\", buttonCloseProps?.className)}\n          variant={buttonCloseProps?.variant ?? \"bordered\"}\n          onPress={onClose}\n          {...defaultButtonProps}\n          {...buttonCloseProps}\n        >\n          {buttonCloseLabel}\n        </Button>\n      )}\n\n      {hasValidActionButton && (\n        <Button\n          onPress={handleAction}\n          {...defaultButtonProps}\n          {...buttonActionProps}\n        >\n          {buttonActionLabel}\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport const Modal = forwardRef<HTMLDivElement, ModalProps>(\n  (\n    {\n      trigger,\n      title,\n      footer,\n      children,\n      onAction,\n      buttonCloseLabel,\n      buttonActionLabel,\n      buttonCloseProps,\n      buttonActionProps,\n      defaultBackdrop = \"opaque\",\n      onOpenChange,\n      classNames,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen, onOpen, onClose } = useDisclosure({\n      onChange: onOpenChange,\n    });\n    const [backdrop, setBackdrop] = useState<Backdrop>(defaultBackdrop);\n\n    const handleOpen = useCallback(\n      (backdropType: Backdrop = defaultBackdrop): void => {\n        setBackdrop(backdropType);\n        onOpen();\n      },\n      [defaultBackdrop, onOpen],\n    );\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>): void => {\n        if (event.key === \"Enter\" || event.key === \" \") {\n          event.preventDefault();\n          handleOpen();\n        }\n      },\n      [handleOpen],\n    );\n\n    const modalClassNames = {\n      closeButton: cn(defaultClassNames.closeButton, classNames?.closeButton),\n      base: cn(defaultClassNames.base, classNames?.base),\n      header: cn(defaultClassNames.header, classNames?.header),\n      body: cn(classNames?.body),\n      footer: cn(defaultClassNames.footer, classNames?.footer),\n      backdrop: cn(classNames?.backdrop),\n    };\n\n    return (\n      <>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => handleOpen()}\n          onKeyDown={handleKeyDown}\n          className=\"inline-block\"\n        >\n          {trigger}\n        </div>\n\n        <ModalRoot\n          ref={ref}\n          backdrop={backdrop}\n          classNames={modalClassNames}\n          isOpen={isOpen}\n          onClose={onClose}\n          {...props}\n        >\n          <ModalContent>\n            {() => (\n              <>\n                {title !== undefined && (\n                  <ModalHeader className={modalClassNames.header}>\n                    {title}\n                  </ModalHeader>\n                )}\n                <ModalBody className={modalClassNames.body}>\n                  {children}\n                </ModalBody>\n                <ModalFooter className={modalClassNames.footer}>\n                  {footer !== undefined ? (\n                    footer\n                  ) : (\n                    <ModalButtons\n                      buttonCloseLabel={buttonCloseLabel}\n                      buttonActionLabel={buttonActionLabel}\n                      buttonCloseProps={buttonCloseProps}\n                      buttonActionProps={buttonActionProps}\n                      onAction={onAction}\n                      onClose={onClose}\n                    />\n                  )}\n                </ModalFooter>\n              </>\n            )}\n          </ModalContent>\n        </ModalRoot>\n      </>\n    );\n  },\n);\n\nModal.displayName = \"Modal\";\n"]}