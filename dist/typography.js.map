{"version":3,"sources":["../src/utils/index.ts","../src/typography/Typography.tsx"],"names":[],"mappings":";;;;;;AAGO,IAAM,EAAA,GAAK,IAAI,MAAiC,KAAA;AACrD,EAAO,OAAA,OAAA,CAAQ,IAAK,CAAA,MAAM,CAAC,CAAA;AAC7B,CAAA;ACqBA,IAAM,cAAiB,GAAA;AAAA,EACrB,EAAI,EAAA,gCAAA;AAAA,EACJ,EAAI,EAAA,gCAAA;AAAA,EACJ,EAAI,EAAA,gCAAA;AAAA,EACJ,EAAI,EAAA,mCAAA;AAAA,EACJ,EAAI,EAAA,kCAAA;AAAA,EACJ,EAAI,EAAA,oCAAA;AAAA,EACJ,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA,SAAA;AAAA,EACP,OAAS,EAAA,SAAA;AAAA,EACT,QAAU,EAAA;AACZ,CAAA;AAEA,IAAM,aAAgB,GAAA;AAAA,EACpB,KAAO,EAAA,YAAA;AAAA,EACP,MAAQ,EAAA,aAAA;AAAA,EACR,MAAQ,EAAA,aAAA;AAAA,EACR,QAAU,EAAA,eAAA;AAAA,EACV,IAAM,EAAA;AACR,CAAA;AAEA,IAAM,YAAe,GAAA;AAAA,EACnB,IAAM,EAAA,WAAA;AAAA,EACN,MAAQ,EAAA,aAAA;AAAA,EACR,KAAO,EAAA,YAAA;AAAA,EACP,OAAS,EAAA;AACX,CAAA;AAEO,IAAM,UAAa,GAAA,UAAA;AAAA,EACxB,CACE;AAAA,IACE,QAAA;AAAA,IACA,IAAI,SAAY,GAAA,GAAA;AAAA,IAChB,OAAU,GAAA,MAAA;AAAA,IACV,MAAA;AAAA,IACA,KAAA;AAAA,IACA,KAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,GAAG;AAAA,KAEL,GACG,KAAA;AACH,IAAA,MAAM,OAAU,GAAA,EAAA;AAAA,MACd,eAAe,OAAO,CAAA;AAAA,MACtB,MAAA,IAAU,cAAc,MAAM,CAAA;AAAA,MAC9B,KAAA,IAAS,aAAa,KAAK,CAAA;AAAA,MAC3B,KAAA,KAAU,KAAa,CAAA,IAAA,CAAA,KAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,MACpC,aAAa,KAAa,CAAA,IAAA,UAAA;AAAA,MAC1B;AAAA,KACF;AAEA,IAAA,2BACG,SAAU,EAAA,EAAA,GAAA,EAAU,WAAW,OAAU,EAAA,GAAG,OAC1C,QACH,EAAA,CAAA;AAAA;AAGN;AAEA,UAAA,CAAW,WAAc,GAAA,YAAA","file":"typography.js","sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport const cn = (...inputs: ClassValue[]): string => {\n  return twMerge(clsx(inputs));\n};\n\nexport const capitalizeFirstLetter = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const concatenateWithSpace = (\n  ...strings: (string | undefined)[]\n): string => strings.filter(Boolean).join(\" \");\n\nexport const startsWith = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\n\nexport const endsWith = (str: string, suffix: string): boolean =>\n  str.endsWith(suffix);\n\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\nexport const trim = (str: string): string => str.trim();\n\nexport const reverse = (str: string): string =>\n  str.split(\"\").reverse().join(\"\");\n\nexport const limitValue = (\n  value: number,\n  min: number | undefined,\n  max: number | undefined,\n): number => {\n  if (min === undefined && max === undefined) {\n    return value;\n  }\n\n  if (min !== undefined && max === undefined) {\n    return Math.max(value, min);\n  }\n\n  if (min === undefined && max !== undefined) {\n    return Math.min(value, max);\n  }\n\n  if (min !== undefined && max !== undefined) {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  return value;\n};\n\ntype DebouncedFunction<Args extends unknown[]> = {\n  (...args: Args): void;\n  cancel: () => void;\n};\n\n//debounce function\nexport function debounce<\n  Callback extends (...args: never[]) => unknown,\n  Args extends Parameters<Callback>,\n>(callback: Callback, delay = 0): DebouncedFunction<Args> {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let latestArgs: Args | undefined;\n\n  function debouncedFn(this: unknown, ...args: Args): void {\n    latestArgs = args;\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      if (latestArgs) {\n        callback.apply(this, latestArgs);\n      }\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }, delay);\n  }\n\n  debouncedFn.cancel = function cancel(): void {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n      latestArgs = undefined;\n    }\n  };\n\n  return debouncedFn;\n}\n","import type { ReactNode, ElementType } from \"react\";\n\nexport interface TypographyProps {\n  children: ReactNode;\n  as?: ElementType;\n  variant?:\n    | \"h1\"\n    | \"h2\"\n    | \"h3\"\n    | \"h4\"\n    | \"h5\"\n    | \"h6\"\n    | \"base\"\n    | \"small\"\n    | \"caption\"\n    | \"overline\";\n  weight?: \"light\" | \"normal\" | \"medium\" | \"semibold\" | \"bold\";\n  align?: \"left\" | \"center\" | \"right\" | \"justify\";\n  color?: string;\n  truncate?: boolean;\n  className?: string;\n}\n\nimport { forwardRef } from \"react\";\nimport { cn } from \"@/utils\";\n\nconst VARIANT_STYLES = {\n  h1: \"text-4xl md:text-5xl font-bold\",\n  h2: \"text-3xl md:text-4xl font-bold\",\n  h3: \"text-2xl md:text-3xl font-bold\",\n  h4: \"text-xl md:text-2xl font-semibold\",\n  h5: \"text-lg md:text-xl font-semibold\",\n  h6: \"text-base md:text-lg font-semibold\",\n  base: \"text-base\",\n  small: \"text-sm\",\n  caption: \"text-xs\",\n  overline: \"text-xs uppercase tracking-wider\",\n};\n\nconst WEIGHT_STYLES = {\n  light: \"font-light\",\n  normal: \"font-normal\",\n  medium: \"font-medium\",\n  semibold: \"font-semibold\",\n  bold: \"font-bold\",\n};\n\nconst ALIGN_STYLES = {\n  left: \"text-left\",\n  center: \"text-center\",\n  right: \"text-right\",\n  justify: \"text-justify\",\n};\n\nexport const Typography = forwardRef<HTMLElement, TypographyProps>(\n  (\n    {\n      children,\n      as: Component = \"p\",\n      variant = \"base\",\n      weight,\n      align,\n      color,\n      truncate,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const classes = cn(\n      VARIANT_STYLES[variant],\n      weight && WEIGHT_STYLES[weight],\n      align && ALIGN_STYLES[align],\n      color !== undefined && `text-${color}`,\n      truncate !== undefined && \"truncate\",\n      className,\n    );\n\n    return (\n      <Component ref={ref} className={classes} {...props}>\n        {children}\n      </Component>\n    );\n  },\n);\n\nTypography.displayName = \"Typography\";\n"]}